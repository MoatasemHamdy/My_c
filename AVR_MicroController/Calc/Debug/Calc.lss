
Calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  00002a0e  00002a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000024b4  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017b3  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  0000688f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000210  00000000  00000000  00006a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268a  00000000  00000000  00006c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014e0  00000000  00000000  000092e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a9  00000000  00000000  0000a7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000ba74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fe  00000000  00000000  0000bc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009aa  00000000  00000000  0000bf52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 01 11 	call	0x2202	; 0x2202 <main>
      7a:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 ec       	ldi	r26, 0xC9	; 201
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 ec       	ldi	r24, 0xC9	; 201
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	69 ec       	ldi	r22, 0xC9	; 201
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x18>

000008fa <__fixsfsi>:
     8fa:	ac e0       	ldi	r26, 0x0C	; 12
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x20>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	be 01       	movw	r22, r28
     914:	6b 5f       	subi	r22, 0xFB	; 251
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     91c:	8d 81       	ldd	r24, Y+5	; 0x05
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	61 f1       	breq	.+88     	; 0x97a <__fixsfsi+0x80>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	50 f1       	brcs	.+84     	; 0x97a <__fixsfsi+0x80>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	21 f4       	brne	.+8      	; 0x932 <__fixsfsi+0x38>
     92a:	8e 81       	ldd	r24, Y+6	; 0x06
     92c:	88 23       	and	r24, r24
     92e:	51 f1       	breq	.+84     	; 0x984 <__fixsfsi+0x8a>
     930:	2e c0       	rjmp	.+92     	; 0x98e <__fixsfsi+0x94>
     932:	2f 81       	ldd	r18, Y+7	; 0x07
     934:	38 85       	ldd	r19, Y+8	; 0x08
     936:	37 fd       	sbrc	r19, 7
     938:	20 c0       	rjmp	.+64     	; 0x97a <__fixsfsi+0x80>
     93a:	6e 81       	ldd	r22, Y+6	; 0x06
     93c:	2f 31       	cpi	r18, 0x1F	; 31
     93e:	31 05       	cpc	r19, r1
     940:	1c f0       	brlt	.+6      	; 0x948 <__fixsfsi+0x4e>
     942:	66 23       	and	r22, r22
     944:	f9 f0       	breq	.+62     	; 0x984 <__fixsfsi+0x8a>
     946:	23 c0       	rjmp	.+70     	; 0x98e <__fixsfsi+0x94>
     948:	8e e1       	ldi	r24, 0x1E	; 30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	4b 85       	ldd	r20, Y+11	; 0x0b
     956:	5c 85       	ldd	r21, Y+12	; 0x0c
     958:	04 c0       	rjmp	.+8      	; 0x962 <__fixsfsi+0x68>
     95a:	56 95       	lsr	r21
     95c:	47 95       	ror	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	8a 95       	dec	r24
     964:	d2 f7       	brpl	.-12     	; 0x95a <__fixsfsi+0x60>
     966:	66 23       	and	r22, r22
     968:	b1 f0       	breq	.+44     	; 0x996 <__fixsfsi+0x9c>
     96a:	50 95       	com	r21
     96c:	40 95       	com	r20
     96e:	30 95       	com	r19
     970:	21 95       	neg	r18
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	4f 4f       	sbci	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	0e c0       	rjmp	.+28     	; 0x996 <__fixsfsi+0x9c>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	09 c0       	rjmp	.+18     	; 0x996 <__fixsfsi+0x9c>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f ef       	ldi	r20, 0xFF	; 255
     98a:	5f e7       	ldi	r21, 0x7F	; 127
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__fixsfsi+0x9c>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e8       	ldi	r21, 0x80	; 128
     996:	b9 01       	movw	r22, r18
     998:	ca 01       	movw	r24, r20
     99a:	2c 96       	adiw	r28, 0x0c	; 12
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x20>

000009a2 <__floatunsisf>:
     9a2:	a8 e0       	ldi	r26, 0x08	; 8
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__prologue_saves__+0x10>
     9ae:	7b 01       	movw	r14, r22
     9b0:	8c 01       	movw	r16, r24
     9b2:	61 15       	cp	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	81 05       	cpc	r24, r1
     9b8:	91 05       	cpc	r25, r1
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <__floatunsisf+0x20>
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	60 c0       	rjmp	.+192    	; 0xa82 <__floatunsisf+0xe0>
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	8e e1       	ldi	r24, 0x1E	; 30
     9c8:	c8 2e       	mov	r12, r24
     9ca:	d1 2c       	mov	r13, r1
     9cc:	dc 82       	std	Y+4, r13	; 0x04
     9ce:	cb 82       	std	Y+3, r12	; 0x03
     9d0:	ed 82       	std	Y+5, r14	; 0x05
     9d2:	fe 82       	std	Y+6, r15	; 0x06
     9d4:	0f 83       	std	Y+7, r16	; 0x07
     9d6:	18 87       	std	Y+8, r17	; 0x08
     9d8:	c8 01       	movw	r24, r16
     9da:	b7 01       	movw	r22, r14
     9dc:	0e 94 4a 05 	call	0xa94	; 0xa94 <__clzsi2>
     9e0:	fc 01       	movw	r30, r24
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	f7 ff       	sbrs	r31, 7
     9e6:	3b c0       	rjmp	.+118    	; 0xa5e <__floatunsisf+0xbc>
     9e8:	22 27       	eor	r18, r18
     9ea:	33 27       	eor	r19, r19
     9ec:	2e 1b       	sub	r18, r30
     9ee:	3f 0b       	sbc	r19, r31
     9f0:	57 01       	movw	r10, r14
     9f2:	68 01       	movw	r12, r16
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatunsisf+0x5e>
     9f8:	d6 94       	lsr	r13
     9fa:	c7 94       	ror	r12
     9fc:	b7 94       	ror	r11
     9fe:	a7 94       	ror	r10
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatunsisf+0x56>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0x7c>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	aa 1f       	adc	r26, r26
     a1c:	bb 1f       	adc	r27, r27
     a1e:	2a 95       	dec	r18
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0x74>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	a1 09       	sbc	r26, r1
     a26:	b1 09       	sbc	r27, r1
     a28:	8e 21       	and	r24, r14
     a2a:	9f 21       	and	r25, r15
     a2c:	a0 23       	and	r26, r16
     a2e:	b1 23       	and	r27, r17
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	a1 05       	cpc	r26, r1
     a34:	b1 05       	cpc	r27, r1
     a36:	21 f0       	breq	.+8      	; 0xa40 <__floatunsisf+0x9e>
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	4a 29       	or	r20, r10
     a42:	5b 29       	or	r21, r11
     a44:	6c 29       	or	r22, r12
     a46:	7d 29       	or	r23, r13
     a48:	4d 83       	std	Y+5, r20	; 0x05
     a4a:	5e 83       	std	Y+6, r21	; 0x06
     a4c:	6f 83       	std	Y+7, r22	; 0x07
     a4e:	78 87       	std	Y+8, r23	; 0x08
     a50:	8e e1       	ldi	r24, 0x1E	; 30
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	8e 1b       	sub	r24, r30
     a56:	9f 0b       	sbc	r25, r31
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <__floatunsisf+0xe0>
     a5e:	30 97       	sbiw	r30, 0x00	; 0
     a60:	81 f0       	breq	.+32     	; 0xa82 <__floatunsisf+0xe0>
     a62:	0e 2e       	mov	r0, r30
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__floatunsisf+0xcc>
     a66:	ee 0c       	add	r14, r14
     a68:	ff 1c       	adc	r15, r15
     a6a:	00 1f       	adc	r16, r16
     a6c:	11 1f       	adc	r17, r17
     a6e:	0a 94       	dec	r0
     a70:	d2 f7       	brpl	.-12     	; 0xa66 <__floatunsisf+0xc4>
     a72:	ed 82       	std	Y+5, r14	; 0x05
     a74:	fe 82       	std	Y+6, r15	; 0x06
     a76:	0f 83       	std	Y+7, r16	; 0x07
     a78:	18 87       	std	Y+8, r17	; 0x08
     a7a:	ce 1a       	sub	r12, r30
     a7c:	df 0a       	sbc	r13, r31
     a7e:	dc 82       	std	Y+4, r13	; 0x04
     a80:	cb 82       	std	Y+3, r12	; 0x03
     a82:	1a 82       	std	Y+2, r1	; 0x02
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     a8c:	28 96       	adiw	r28, 0x08	; 8
     a8e:	ea e0       	ldi	r30, 0x0A	; 10
     a90:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__epilogue_restores__+0x10>

00000a94 <__clzsi2>:
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	7b 01       	movw	r14, r22
     a9e:	8c 01       	movw	r16, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	e8 16       	cp	r14, r24
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	f8 06       	cpc	r15, r24
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	08 07       	cpc	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	18 07       	cpc	r17, r24
     ab0:	88 f4       	brcc	.+34     	; 0xad4 <__clzsi2+0x40>
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	e8 16       	cp	r14, r24
     ab6:	f1 04       	cpc	r15, r1
     ab8:	01 05       	cpc	r16, r1
     aba:	11 05       	cpc	r17, r1
     abc:	31 f0       	breq	.+12     	; 0xaca <__clzsi2+0x36>
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x36>
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	17 c0       	rjmp	.+46     	; 0xaf8 <__clzsi2+0x64>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <__clzsi2+0x64>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	e8 16       	cp	r14, r24
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	f8 06       	cpc	r15, r24
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 07       	cpc	r16, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	18 07       	cpc	r17, r24
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <__clzsi2+0x5c>
     ae6:	88 e1       	ldi	r24, 0x18	; 24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__clzsi2+0x64>
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	20 e2       	ldi	r18, 0x20	; 32
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	28 1b       	sub	r18, r24
     b02:	39 0b       	sbc	r19, r25
     b04:	4a 0b       	sbc	r20, r26
     b06:	5b 0b       	sbc	r21, r27
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__clzsi2+0x7e>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	8a 95       	dec	r24
     b14:	d2 f7       	brpl	.-12     	; 0xb0a <__clzsi2+0x76>
     b16:	f7 01       	movw	r30, r14
     b18:	ef 52       	subi	r30, 0x2F	; 47
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	80 81       	ld	r24, Z
     b1e:	28 1b       	sub	r18, r24
     b20:	31 09       	sbc	r19, r1
     b22:	41 09       	sbc	r20, r1
     b24:	51 09       	sbc	r21, r1
     b26:	c9 01       	movw	r24, r18
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <__pack_f>:
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	fc 01       	movw	r30, r24
     b3e:	e4 80       	ldd	r14, Z+4	; 0x04
     b40:	f5 80       	ldd	r15, Z+5	; 0x05
     b42:	06 81       	ldd	r16, Z+6	; 0x06
     b44:	17 81       	ldd	r17, Z+7	; 0x07
     b46:	d1 80       	ldd	r13, Z+1	; 0x01
     b48:	80 81       	ld	r24, Z
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	48 f4       	brcc	.+18     	; 0xb60 <__pack_f+0x2e>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e1       	ldi	r26, 0x10	; 16
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e8 2a       	or	r14, r24
     b58:	f9 2a       	or	r15, r25
     b5a:	0a 2b       	or	r16, r26
     b5c:	1b 2b       	or	r17, r27
     b5e:	a5 c0       	rjmp	.+330    	; 0xcaa <__pack_f+0x178>
     b60:	84 30       	cpi	r24, 0x04	; 4
     b62:	09 f4       	brne	.+2      	; 0xb66 <__pack_f+0x34>
     b64:	9f c0       	rjmp	.+318    	; 0xca4 <__pack_f+0x172>
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	21 f4       	brne	.+8      	; 0xb72 <__pack_f+0x40>
     b6a:	ee 24       	eor	r14, r14
     b6c:	ff 24       	eor	r15, r15
     b6e:	87 01       	movw	r16, r14
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <__pack_f+0x4a>
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	01 05       	cpc	r16, r1
     b78:	11 05       	cpc	r17, r1
     b7a:	19 f4       	brne	.+6      	; 0xb82 <__pack_f+0x50>
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	96 c0       	rjmp	.+300    	; 0xcae <__pack_f+0x17c>
     b82:	62 81       	ldd	r22, Z+2	; 0x02
     b84:	73 81       	ldd	r23, Z+3	; 0x03
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	62 38       	cpi	r22, 0x82	; 130
     b8a:	79 07       	cpc	r23, r25
     b8c:	0c f0       	brlt	.+2      	; 0xb90 <__pack_f+0x5e>
     b8e:	5b c0       	rjmp	.+182    	; 0xc46 <__pack_f+0x114>
     b90:	22 e8       	ldi	r18, 0x82	; 130
     b92:	3f ef       	ldi	r19, 0xFF	; 255
     b94:	26 1b       	sub	r18, r22
     b96:	37 0b       	sbc	r19, r23
     b98:	2a 31       	cpi	r18, 0x1A	; 26
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f0       	brlt	.+10     	; 0xba8 <__pack_f+0x76>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	2a c0       	rjmp	.+84     	; 0xbfc <__pack_f+0xca>
     ba8:	b8 01       	movw	r22, r16
     baa:	a7 01       	movw	r20, r14
     bac:	02 2e       	mov	r0, r18
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <__pack_f+0x86>
     bb0:	76 95       	lsr	r23
     bb2:	67 95       	ror	r22
     bb4:	57 95       	ror	r21
     bb6:	47 95       	ror	r20
     bb8:	0a 94       	dec	r0
     bba:	d2 f7       	brpl	.-12     	; 0xbb0 <__pack_f+0x7e>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x9c>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	2a 95       	dec	r18
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <__pack_f+0x94>
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	a1 09       	sbc	r26, r1
     bd6:	b1 09       	sbc	r27, r1
     bd8:	8e 21       	and	r24, r14
     bda:	9f 21       	and	r25, r15
     bdc:	a0 23       	and	r26, r16
     bde:	b1 23       	and	r27, r17
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	a1 05       	cpc	r26, r1
     be4:	b1 05       	cpc	r27, r1
     be6:	21 f0       	breq	.+8      	; 0xbf0 <__pack_f+0xbe>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	9a 01       	movw	r18, r20
     bf2:	ab 01       	movw	r20, r22
     bf4:	28 2b       	or	r18, r24
     bf6:	39 2b       	or	r19, r25
     bf8:	4a 2b       	or	r20, r26
     bfa:	5b 2b       	or	r21, r27
     bfc:	da 01       	movw	r26, r20
     bfe:	c9 01       	movw	r24, r18
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	90 70       	andi	r25, 0x00	; 0
     c04:	a0 70       	andi	r26, 0x00	; 0
     c06:	b0 70       	andi	r27, 0x00	; 0
     c08:	80 34       	cpi	r24, 0x40	; 64
     c0a:	91 05       	cpc	r25, r1
     c0c:	a1 05       	cpc	r26, r1
     c0e:	b1 05       	cpc	r27, r1
     c10:	39 f4       	brne	.+14     	; 0xc20 <__pack_f+0xee>
     c12:	27 ff       	sbrs	r18, 7
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <__pack_f+0xf6>
     c16:	20 5c       	subi	r18, 0xC0	; 192
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	4f 4f       	sbci	r20, 0xFF	; 255
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0xf6>
     c20:	21 5c       	subi	r18, 0xC1	; 193
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	4f 4f       	sbci	r20, 0xFF	; 255
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	e0 e0       	ldi	r30, 0x00	; 0
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	20 30       	cpi	r18, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	3a 07       	cpc	r19, r26
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	4a 07       	cpc	r20, r26
     c36:	a0 e4       	ldi	r26, 0x40	; 64
     c38:	5a 07       	cpc	r21, r26
     c3a:	10 f0       	brcs	.+4      	; 0xc40 <__pack_f+0x10e>
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	79 01       	movw	r14, r18
     c42:	8a 01       	movw	r16, r20
     c44:	27 c0       	rjmp	.+78     	; 0xc94 <__pack_f+0x162>
     c46:	60 38       	cpi	r22, 0x80	; 128
     c48:	71 05       	cpc	r23, r1
     c4a:	64 f5       	brge	.+88     	; 0xca4 <__pack_f+0x172>
     c4c:	fb 01       	movw	r30, r22
     c4e:	e1 58       	subi	r30, 0x81	; 129
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	d8 01       	movw	r26, r16
     c54:	c7 01       	movw	r24, r14
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	90 70       	andi	r25, 0x00	; 0
     c5a:	a0 70       	andi	r26, 0x00	; 0
     c5c:	b0 70       	andi	r27, 0x00	; 0
     c5e:	80 34       	cpi	r24, 0x40	; 64
     c60:	91 05       	cpc	r25, r1
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	39 f4       	brne	.+14     	; 0xc76 <__pack_f+0x144>
     c68:	e7 fe       	sbrs	r14, 7
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <__pack_f+0x154>
     c6c:	80 e4       	ldi	r24, 0x40	; 64
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__pack_f+0x14c>
     c76:	8f e3       	ldi	r24, 0x3F	; 63
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e8 0e       	add	r14, r24
     c80:	f9 1e       	adc	r15, r25
     c82:	0a 1f       	adc	r16, r26
     c84:	1b 1f       	adc	r17, r27
     c86:	17 ff       	sbrs	r17, 7
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <__pack_f+0x162>
     c8a:	16 95       	lsr	r17
     c8c:	07 95       	ror	r16
     c8e:	f7 94       	ror	r15
     c90:	e7 94       	ror	r14
     c92:	31 96       	adiw	r30, 0x01	; 1
     c94:	87 e0       	ldi	r24, 0x07	; 7
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	8a 95       	dec	r24
     ca0:	d1 f7       	brne	.-12     	; 0xc96 <__pack_f+0x164>
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__pack_f+0x17c>
     ca4:	ee 24       	eor	r14, r14
     ca6:	ff 24       	eor	r15, r15
     ca8:	87 01       	movw	r16, r14
     caa:	ef ef       	ldi	r30, 0xFF	; 255
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	6e 2f       	mov	r22, r30
     cb0:	67 95       	ror	r22
     cb2:	66 27       	eor	r22, r22
     cb4:	67 95       	ror	r22
     cb6:	90 2f       	mov	r25, r16
     cb8:	9f 77       	andi	r25, 0x7F	; 127
     cba:	d7 94       	ror	r13
     cbc:	dd 24       	eor	r13, r13
     cbe:	d7 94       	ror	r13
     cc0:	8e 2f       	mov	r24, r30
     cc2:	86 95       	lsr	r24
     cc4:	49 2f       	mov	r20, r25
     cc6:	46 2b       	or	r20, r22
     cc8:	58 2f       	mov	r21, r24
     cca:	5d 29       	or	r21, r13
     ccc:	b7 01       	movw	r22, r14
     cce:	ca 01       	movw	r24, r20
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	08 95       	ret

00000cdc <__unpack_f>:
     cdc:	fc 01       	movw	r30, r24
     cde:	db 01       	movw	r26, r22
     ce0:	40 81       	ld	r20, Z
     ce2:	51 81       	ldd	r21, Z+1	; 0x01
     ce4:	22 81       	ldd	r18, Z+2	; 0x02
     ce6:	62 2f       	mov	r22, r18
     ce8:	6f 77       	andi	r22, 0x7F	; 127
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	22 1f       	adc	r18, r18
     cee:	22 27       	eor	r18, r18
     cf0:	22 1f       	adc	r18, r18
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	89 2f       	mov	r24, r25
     cf6:	88 0f       	add	r24, r24
     cf8:	82 2b       	or	r24, r18
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	99 1f       	adc	r25, r25
     d00:	99 27       	eor	r25, r25
     d02:	99 1f       	adc	r25, r25
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	9c 93       	st	X, r25
     d08:	11 97       	sbiw	r26, 0x01	; 1
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	a9 f5       	brne	.+106    	; 0xd7a <__unpack_f+0x9e>
     d10:	41 15       	cp	r20, r1
     d12:	51 05       	cpc	r21, r1
     d14:	61 05       	cpc	r22, r1
     d16:	71 05       	cpc	r23, r1
     d18:	11 f4       	brne	.+4      	; 0xd1e <__unpack_f+0x42>
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	37 c0       	rjmp	.+110    	; 0xd8c <__unpack_f+0xb0>
     d1e:	82 e8       	ldi	r24, 0x82	; 130
     d20:	9f ef       	ldi	r25, 0xFF	; 255
     d22:	13 96       	adiw	r26, 0x03	; 3
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
     d28:	12 97       	sbiw	r26, 0x02	; 2
     d2a:	9a 01       	movw	r18, r20
     d2c:	ab 01       	movw	r20, r22
     d2e:	67 e0       	ldi	r22, 0x07	; 7
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	44 1f       	adc	r20, r20
     d36:	55 1f       	adc	r21, r21
     d38:	6a 95       	dec	r22
     d3a:	d1 f7       	brne	.-12     	; 0xd30 <__unpack_f+0x54>
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	8c 93       	st	X, r24
     d40:	0d c0       	rjmp	.+26     	; 0xd5c <__unpack_f+0x80>
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	44 1f       	adc	r20, r20
     d48:	55 1f       	adc	r21, r21
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	8d 91       	ld	r24, X+
     d4e:	9c 91       	ld	r25, X
     d50:	13 97       	sbiw	r26, 0x03	; 3
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	9c 93       	st	X, r25
     d58:	8e 93       	st	-X, r24
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	20 30       	cpi	r18, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	38 07       	cpc	r19, r24
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	48 07       	cpc	r20, r24
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	58 07       	cpc	r21, r24
     d6a:	58 f3       	brcs	.-42     	; 0xd42 <__unpack_f+0x66>
     d6c:	14 96       	adiw	r26, 0x04	; 4
     d6e:	2d 93       	st	X+, r18
     d70:	3d 93       	st	X+, r19
     d72:	4d 93       	st	X+, r20
     d74:	5c 93       	st	X, r21
     d76:	17 97       	sbiw	r26, 0x07	; 7
     d78:	08 95       	ret
     d7a:	2f 3f       	cpi	r18, 0xFF	; 255
     d7c:	31 05       	cpc	r19, r1
     d7e:	79 f4       	brne	.+30     	; 0xd9e <__unpack_f+0xc2>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	19 f4       	brne	.+6      	; 0xd90 <__unpack_f+0xb4>
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	8c 93       	st	X, r24
     d8e:	08 95       	ret
     d90:	64 ff       	sbrs	r22, 4
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <__unpack_f+0xbe>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	8c 93       	st	X, r24
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <__unpack_f+0xe2>
     d9a:	1c 92       	st	X, r1
     d9c:	10 c0       	rjmp	.+32     	; 0xdbe <__unpack_f+0xe2>
     d9e:	2f 57       	subi	r18, 0x7F	; 127
     da0:	30 40       	sbci	r19, 0x00	; 0
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	3c 93       	st	X, r19
     da6:	2e 93       	st	-X, r18
     da8:	12 97       	sbiw	r26, 0x02	; 2
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	8c 93       	st	X, r24
     dae:	87 e0       	ldi	r24, 0x07	; 7
     db0:	44 0f       	add	r20, r20
     db2:	55 1f       	adc	r21, r21
     db4:	66 1f       	adc	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	8a 95       	dec	r24
     dba:	d1 f7       	brne	.-12     	; 0xdb0 <__unpack_f+0xd4>
     dbc:	70 64       	ori	r23, 0x40	; 64
     dbe:	14 96       	adiw	r26, 0x04	; 4
     dc0:	4d 93       	st	X+, r20
     dc2:	5d 93       	st	X+, r21
     dc4:	6d 93       	st	X+, r22
     dc6:	7c 93       	st	X, r23
     dc8:	17 97       	sbiw	r26, 0x07	; 7
     dca:	08 95       	ret

00000dcc <__fpcmp_parts_f>:
     dcc:	1f 93       	push	r17
     dce:	dc 01       	movw	r26, r24
     dd0:	fb 01       	movw	r30, r22
     dd2:	9c 91       	ld	r25, X
     dd4:	92 30       	cpi	r25, 0x02	; 2
     dd6:	08 f4       	brcc	.+2      	; 0xdda <__fpcmp_parts_f+0xe>
     dd8:	47 c0       	rjmp	.+142    	; 0xe68 <__fpcmp_parts_f+0x9c>
     dda:	80 81       	ld	r24, Z
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	08 f4       	brcc	.+2      	; 0xde2 <__fpcmp_parts_f+0x16>
     de0:	43 c0       	rjmp	.+134    	; 0xe68 <__fpcmp_parts_f+0x9c>
     de2:	94 30       	cpi	r25, 0x04	; 4
     de4:	51 f4       	brne	.+20     	; 0xdfa <__fpcmp_parts_f+0x2e>
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	1c 91       	ld	r17, X
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	99 f5       	brne	.+102    	; 0xe54 <__fpcmp_parts_f+0x88>
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	68 2f       	mov	r22, r24
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	61 1b       	sub	r22, r17
     df6:	71 09       	sbc	r23, r1
     df8:	3f c0       	rjmp	.+126    	; 0xe78 <__fpcmp_parts_f+0xac>
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	21 f0       	breq	.+8      	; 0xe06 <__fpcmp_parts_f+0x3a>
     dfe:	92 30       	cpi	r25, 0x02	; 2
     e00:	31 f4       	brne	.+12     	; 0xe0e <__fpcmp_parts_f+0x42>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	b9 f1       	breq	.+110    	; 0xe74 <__fpcmp_parts_f+0xa8>
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	89 f1       	breq	.+98     	; 0xe6e <__fpcmp_parts_f+0xa2>
     e0c:	2d c0       	rjmp	.+90     	; 0xe68 <__fpcmp_parts_f+0x9c>
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	1c 91       	ld	r17, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	f1 f0       	breq	.+60     	; 0xe54 <__fpcmp_parts_f+0x88>
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	18 17       	cp	r17, r24
     e1c:	d9 f4       	brne	.+54     	; 0xe54 <__fpcmp_parts_f+0x88>
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	2d 91       	ld	r18, X+
     e22:	3c 91       	ld	r19, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	82 17       	cp	r24, r18
     e2c:	93 07       	cpc	r25, r19
     e2e:	94 f0       	brlt	.+36     	; 0xe54 <__fpcmp_parts_f+0x88>
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	bc f0       	brlt	.+46     	; 0xe64 <__fpcmp_parts_f+0x98>
     e36:	14 96       	adiw	r26, 0x04	; 4
     e38:	8d 91       	ld	r24, X+
     e3a:	9d 91       	ld	r25, X+
     e3c:	0d 90       	ld	r0, X+
     e3e:	bc 91       	ld	r27, X
     e40:	a0 2d       	mov	r26, r0
     e42:	24 81       	ldd	r18, Z+4	; 0x04
     e44:	35 81       	ldd	r19, Z+5	; 0x05
     e46:	46 81       	ldd	r20, Z+6	; 0x06
     e48:	57 81       	ldd	r21, Z+7	; 0x07
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	4a 07       	cpc	r20, r26
     e50:	5b 07       	cpc	r21, r27
     e52:	18 f4       	brcc	.+6      	; 0xe5a <__fpcmp_parts_f+0x8e>
     e54:	11 23       	and	r17, r17
     e56:	41 f0       	breq	.+16     	; 0xe68 <__fpcmp_parts_f+0x9c>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <__fpcmp_parts_f+0xa2>
     e5a:	82 17       	cp	r24, r18
     e5c:	93 07       	cpc	r25, r19
     e5e:	a4 07       	cpc	r26, r20
     e60:	b5 07       	cpc	r27, r21
     e62:	40 f4       	brcc	.+16     	; 0xe74 <__fpcmp_parts_f+0xa8>
     e64:	11 23       	and	r17, r17
     e66:	19 f0       	breq	.+6      	; 0xe6e <__fpcmp_parts_f+0xa2>
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <__fpcmp_parts_f+0xac>
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <__fpcmp_parts_f+0xac>
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	cb 01       	movw	r24, r22
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <DIO_u8SetPinDir>:
#include "../Header/DIO_Config.h"
#include "../Header/DIO_Interface.h"


u8 DIO_u8SetPinDir(u8 Local_GroupName,u8 Local_PinNumber,u8 Local_PinState)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	28 97       	sbiw	r28, 0x08	; 8
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	6b 83       	std	Y+3, r22	; 0x03
     e96:	4c 83       	std	Y+4, r20	; 0x04
	RequestState Request ;
	if ((Local_GroupName<=DIO_GroupD)&&(Local_GroupName>=DIO_GroupA))
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_u8SetPinDir+0x22>
     e9e:	04 c1       	rjmp	.+520    	; 0x10a8 <DIO_u8SetPinDir+0x22a>
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <DIO_u8SetPinDir+0x2a>
     ea6:	00 c1       	rjmp	.+512    	; 0x10a8 <DIO_u8SetPinDir+0x22a>
	{
		if((Local_PinNumber<=DIO_PIN7)&&((Local_PinNumber>=DIO_PIN0)))
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <DIO_u8SetPinDir+0x32>
     eae:	f9 c0       	rjmp	.+498    	; 0x10a2 <DIO_u8SetPinDir+0x224>
		{
			if (Local_PinState == DIO_Output)
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <DIO_u8SetPinDir+0x3a>
     eb6:	75 c0       	rjmp	.+234    	; 0xfa2 <DIO_u8SetPinDir+0x124>
			{
				switch(Local_GroupName)
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	38 87       	std	Y+8, r19	; 0x08
     ec0:	2f 83       	std	Y+7, r18	; 0x07
     ec2:	8f 81       	ldd	r24, Y+7	; 0x07
     ec4:	98 85       	ldd	r25, Y+8	; 0x08
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	91 05       	cpc	r25, r1
     eca:	61 f1       	breq	.+88     	; 0xf24 <DIO_u8SetPinDir+0xa6>
     ecc:	2f 81       	ldd	r18, Y+7	; 0x07
     ece:	38 85       	ldd	r19, Y+8	; 0x08
     ed0:	23 30       	cpi	r18, 0x03	; 3
     ed2:	31 05       	cpc	r19, r1
     ed4:	34 f4       	brge	.+12     	; 0xee2 <DIO_u8SetPinDir+0x64>
     ed6:	8f 81       	ldd	r24, Y+7	; 0x07
     ed8:	98 85       	ldd	r25, Y+8	; 0x08
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	91 05       	cpc	r25, r1
     ede:	69 f0       	breq	.+26     	; 0xefa <DIO_u8SetPinDir+0x7c>
     ee0:	e5 c0       	rjmp	.+458    	; 0x10ac <DIO_u8SetPinDir+0x22e>
     ee2:	2f 81       	ldd	r18, Y+7	; 0x07
     ee4:	38 85       	ldd	r19, Y+8	; 0x08
     ee6:	23 30       	cpi	r18, 0x03	; 3
     ee8:	31 05       	cpc	r19, r1
     eea:	89 f1       	breq	.+98     	; 0xf4e <DIO_u8SetPinDir+0xd0>
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	98 85       	ldd	r25, Y+8	; 0x08
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	91 05       	cpc	r25, r1
     ef4:	09 f4       	brne	.+2      	; 0xef8 <DIO_u8SetPinDir+0x7a>
     ef6:	40 c0       	rjmp	.+128    	; 0xf78 <DIO_u8SetPinDir+0xfa>
     ef8:	d9 c0       	rjmp	.+434    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				{
				case DIO_GroupA : DIO_DDRA |=(1<<Local_PinNumber);//setbit(DIO_DDRA,Local_PinNumber);
     efa:	aa e3       	ldi	r26, 0x3A	; 58
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ea e3       	ldi	r30, 0x3A	; 58
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8SetPinDir+0x9a>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8SetPinDir+0x96>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
				Request =RequestHandled ;
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	c4 c0       	rjmp	.+392    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				case DIO_GroupB : DIO_DDRB |=(1<<Local_PinNumber);//setbit(DIO_DDRB,Local_PinNumber);
     f24:	a7 e3       	ldi	r26, 0x37	; 55
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e7 e3       	ldi	r30, 0x37	; 55
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_u8SetPinDir+0xc4>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_u8SetPinDir+0xc0>
     f46:	84 2b       	or	r24, r20
     f48:	8c 93       	st	X, r24
				Request =RequestHandled ;
     f4a:	19 82       	std	Y+1, r1	; 0x01
     f4c:	af c0       	rjmp	.+350    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				case DIO_GroupC : DIO_DDRC |=(1<<Local_PinNumber);//setbit(DIO_DDRC,Local_PinNumber);
     f4e:	a4 e3       	ldi	r26, 0x34	; 52
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e4 e3       	ldi	r30, 0x34	; 52
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_u8SetPinDir+0xee>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_u8SetPinDir+0xea>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
				Request =RequestHandled ;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	9a c0       	rjmp	.+308    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				case DIO_GroupD : DIO_DDRD |=(1<<Local_PinNumber);//setbit(DIO_DDRD,Local_PinNumber);
     f78:	a1 e3       	ldi	r26, 0x31	; 49
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e3       	ldi	r30, 0x31	; 49
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_u8SetPinDir+0x118>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_u8SetPinDir+0x114>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
				Request =RequestHandled ;
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	85 c0       	rjmp	.+266    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				}
			}
			else if (Local_PinState == DIO_Input)
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	88 23       	and	r24, r24
     fa6:	09 f0       	breq	.+2      	; 0xfaa <DIO_u8SetPinDir+0x12c>
     fa8:	79 c0       	rjmp	.+242    	; 0x109c <DIO_u8SetPinDir+0x21e>
			{
				switch(Local_GroupName)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3e 83       	std	Y+6, r19	; 0x06
     fb2:	2d 83       	std	Y+5, r18	; 0x05
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	91 05       	cpc	r25, r1
     fbc:	69 f1       	breq	.+90     	; 0x1018 <DIO_u8SetPinDir+0x19a>
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	23 30       	cpi	r18, 0x03	; 3
     fc4:	31 05       	cpc	r19, r1
     fc6:	34 f4       	brge	.+12     	; 0xfd4 <DIO_u8SetPinDir+0x156>
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	69 f0       	breq	.+26     	; 0xfec <DIO_u8SetPinDir+0x16e>
     fd2:	6c c0       	rjmp	.+216    	; 0x10ac <DIO_u8SetPinDir+0x22e>
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	23 30       	cpi	r18, 0x03	; 3
     fda:	31 05       	cpc	r19, r1
     fdc:	99 f1       	breq	.+102    	; 0x1044 <DIO_u8SetPinDir+0x1c6>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_u8SetPinDir+0x16c>
     fe8:	43 c0       	rjmp	.+134    	; 0x1070 <DIO_u8SetPinDir+0x1f2>
     fea:	60 c0       	rjmp	.+192    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				{
				case DIO_GroupA : DIO_DDRA &=~(1<<Local_PinNumber);//CLRBIT(DIO_DDRA,Local_PinNumber);
     fec:	aa e3       	ldi	r26, 0x3A	; 58
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ea e3       	ldi	r30, 0x3A	; 58
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8SetPinDir+0x18c>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_u8SetPinDir+0x188>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
				Request =RequestHandled ;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	4a c0       	rjmp	.+148    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				case DIO_GroupB : DIO_DDRB &=~(1<<Local_PinNumber);//CLRBIT(DIO_DDRB,Local_PinNumber);
    1018:	a7 e3       	ldi	r26, 0x37	; 55
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e3       	ldi	r30, 0x37	; 55
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_u8SetPinDir+0x1b8>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_u8SetPinDir+0x1b4>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
				Request =RequestHandled ;
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	34 c0       	rjmp	.+104    	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				case DIO_GroupC : DIO_DDRC &=~(1<<Local_PinNumber);//CLRBIT(DIO_DDRC,Local_PinNumber);
    1044:	a4 e3       	ldi	r26, 0x34	; 52
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e4 e3       	ldi	r30, 0x34	; 52
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_u8SetPinDir+0x1e4>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_u8SetPinDir+0x1e0>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
				Request =RequestHandled ;
    106c:	19 82       	std	Y+1, r1	; 0x01
    106e:	1e c0       	rjmp	.+60     	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				case DIO_GroupD : DIO_DDRD &=~(1<<Local_PinNumber);//CLRBIT(DIO_DDRD,Local_PinNumber);
    1070:	a1 e3       	ldi	r26, 0x31	; 49
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e1 e3       	ldi	r30, 0x31	; 49
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8SetPinDir+0x210>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8SetPinDir+0x20c>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
				Request =RequestHandled ;
    1098:	19 82       	std	Y+1, r1	; 0x01
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <DIO_u8SetPinDir+0x22e>
				break;
				}
			}
			else
			{
				Request = RequestErrorNotValidState;
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <DIO_u8SetPinDir+0x22e>
			}
		}
		else
		{
			Request = RequestErrorPinOutOFRange ;
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_u8SetPinDir+0x22e>
		}
	}
	else
	{
		Request = RequestErrorGroupOutOFRange ;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	28 96       	adiw	r28, 0x08	; 8
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Local_GroupName,u8 Local_PinNumber,u8 Local_PinValue )
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	28 97       	sbiw	r28, 0x08	; 8
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	6b 83       	std	Y+3, r22	; 0x03
    10d8:	4c 83       	std	Y+4, r20	; 0x04
	RequestState Request ;
	if ((Local_GroupName<=DIO_GroupD)&&(Local_GroupName>=DIO_GroupA))
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	85 30       	cpi	r24, 0x05	; 5
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <DIO_u8SetPinValue+0x22>
    10e0:	04 c1       	rjmp	.+520    	; 0x12ea <DIO_u8SetPinValue+0x22a>
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <DIO_u8SetPinValue+0x2a>
    10e8:	00 c1       	rjmp	.+512    	; 0x12ea <DIO_u8SetPinValue+0x22a>
	{
		if((Local_PinNumber<=DIO_PIN7)&&((Local_PinNumber>=DIO_PIN0)))
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <DIO_u8SetPinValue+0x32>
    10f0:	f9 c0       	rjmp	.+498    	; 0x12e4 <DIO_u8SetPinValue+0x224>
		{
			if (Local_PinValue == DIO_High)
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO_u8SetPinValue+0x3a>
    10f8:	75 c0       	rjmp	.+234    	; 0x11e4 <DIO_u8SetPinValue+0x124>
			{
				switch(Local_GroupName)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	38 87       	std	Y+8, r19	; 0x08
    1102:	2f 83       	std	Y+7, r18	; 0x07
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	91 05       	cpc	r25, r1
    110c:	61 f1       	breq	.+88     	; 0x1166 <DIO_u8SetPinValue+0xa6>
    110e:	2f 81       	ldd	r18, Y+7	; 0x07
    1110:	38 85       	ldd	r19, Y+8	; 0x08
    1112:	23 30       	cpi	r18, 0x03	; 3
    1114:	31 05       	cpc	r19, r1
    1116:	34 f4       	brge	.+12     	; 0x1124 <DIO_u8SetPinValue+0x64>
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	98 85       	ldd	r25, Y+8	; 0x08
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	91 05       	cpc	r25, r1
    1120:	69 f0       	breq	.+26     	; 0x113c <DIO_u8SetPinValue+0x7c>
    1122:	e5 c0       	rjmp	.+458    	; 0x12ee <DIO_u8SetPinValue+0x22e>
    1124:	2f 81       	ldd	r18, Y+7	; 0x07
    1126:	38 85       	ldd	r19, Y+8	; 0x08
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	89 f1       	breq	.+98     	; 0x1190 <DIO_u8SetPinValue+0xd0>
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	98 85       	ldd	r25, Y+8	; 0x08
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <DIO_u8SetPinValue+0x7a>
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <DIO_u8SetPinValue+0xfa>
    113a:	d9 c0       	rjmp	.+434    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				{
				case DIO_GroupA : DIO_PORTA |=(1<<Local_PinNumber);//setbit(DIO_PORTA,Local_PinNumber);
    113c:	ab e3       	ldi	r26, 0x3B	; 59
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	eb e3       	ldi	r30, 0x3B	; 59
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8SetPinValue+0x9a>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8SetPinValue+0x96>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
				Request =RequestHandled ;
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	c4 c0       	rjmp	.+392    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				case DIO_GroupB : DIO_PORTB |=(1<<Local_PinNumber);//setbit(DIO_PORTB,Local_PinNumber);
    1166:	a8 e3       	ldi	r26, 0x38	; 56
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 e3       	ldi	r30, 0x38	; 56
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_u8SetPinValue+0xc4>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_u8SetPinValue+0xc0>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
				Request =RequestHandled ;
    118c:	19 82       	std	Y+1, r1	; 0x01
    118e:	af c0       	rjmp	.+350    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				case DIO_GroupC : DIO_PORTC |=(1<<Local_PinNumber);//setbit(DIO_PORTD,Local_PinNumber);
    1190:	a5 e3       	ldi	r26, 0x35	; 53
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e3       	ldi	r30, 0x35	; 53
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_u8SetPinValue+0xee>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_u8SetPinValue+0xea>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
				Request =RequestHandled ;
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	9a c0       	rjmp	.+308    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				case DIO_GroupD : DIO_PORTD |=(1<<Local_PinNumber);//setbit(DIO_PORTD,Local_PinNumber);
    11ba:	a2 e3       	ldi	r26, 0x32	; 50
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e2 e3       	ldi	r30, 0x32	; 50
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8SetPinValue+0x118>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8SetPinValue+0x114>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
				Request =RequestHandled ;
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	85 c0       	rjmp	.+266    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				}
			}
			else if (Local_PinValue == DIO_Low)
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	88 23       	and	r24, r24
    11e8:	09 f0       	breq	.+2      	; 0x11ec <DIO_u8SetPinValue+0x12c>
    11ea:	79 c0       	rjmp	.+242    	; 0x12de <DIO_u8SetPinValue+0x21e>
			{
				switch(Local_GroupName)
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3e 83       	std	Y+6, r19	; 0x06
    11f4:	2d 83       	std	Y+5, r18	; 0x05
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	91 05       	cpc	r25, r1
    11fe:	69 f1       	breq	.+90     	; 0x125a <DIO_u8SetPinValue+0x19a>
    1200:	2d 81       	ldd	r18, Y+5	; 0x05
    1202:	3e 81       	ldd	r19, Y+6	; 0x06
    1204:	23 30       	cpi	r18, 0x03	; 3
    1206:	31 05       	cpc	r19, r1
    1208:	34 f4       	brge	.+12     	; 0x1216 <DIO_u8SetPinValue+0x156>
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	69 f0       	breq	.+26     	; 0x122e <DIO_u8SetPinValue+0x16e>
    1214:	6c c0       	rjmp	.+216    	; 0x12ee <DIO_u8SetPinValue+0x22e>
    1216:	2d 81       	ldd	r18, Y+5	; 0x05
    1218:	3e 81       	ldd	r19, Y+6	; 0x06
    121a:	23 30       	cpi	r18, 0x03	; 3
    121c:	31 05       	cpc	r19, r1
    121e:	99 f1       	breq	.+102    	; 0x1286 <DIO_u8SetPinValue+0x1c6>
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	84 30       	cpi	r24, 0x04	; 4
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_u8SetPinValue+0x16c>
    122a:	43 c0       	rjmp	.+134    	; 0x12b2 <DIO_u8SetPinValue+0x1f2>
    122c:	60 c0       	rjmp	.+192    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				{
				case DIO_GroupA : DIO_PORTA &=~(1<<Local_PinNumber);//CLRBIT(DIO_PORTA,Local_PinNumber);
    122e:	ab e3       	ldi	r26, 0x3B	; 59
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_u8SetPinValue+0x18c>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_u8SetPinValue+0x188>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
				Request =RequestHandled ;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	4a c0       	rjmp	.+148    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				case DIO_GroupB : DIO_PORTB &=~(1<<Local_PinNumber);//CLRBIT(DIO_PORTB,Local_PinNumber);
    125a:	a8 e3       	ldi	r26, 0x38	; 56
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8SetPinValue+0x1b8>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8SetPinValue+0x1b4>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
				Request =RequestHandled ;
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	34 c0       	rjmp	.+104    	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				case DIO_GroupC : DIO_PORTC &=~(1<<Local_PinNumber);//CLRBIT(DIO_PORTC,Local_PinNumber);
    1286:	a5 e3       	ldi	r26, 0x35	; 53
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e3       	ldi	r30, 0x35	; 53
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_u8SetPinValue+0x1e4>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_u8SetPinValue+0x1e0>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
				Request =RequestHandled ;
    12ae:	19 82       	std	Y+1, r1	; 0x01
    12b0:	1e c0       	rjmp	.+60     	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				case DIO_GroupD : DIO_PORTD &=~(1<<Local_PinNumber);//CLRBIT(DIO_PORTD,Local_PinNumber);
    12b2:	a2 e3       	ldi	r26, 0x32	; 50
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e2 e3       	ldi	r30, 0x32	; 50
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_u8SetPinValue+0x210>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_u8SetPinValue+0x20c>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
				Request =RequestHandled ;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <DIO_u8SetPinValue+0x22e>
				break;
				}
			}
			else
			{
				Request = RequestErrorNotValidValue;
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <DIO_u8SetPinValue+0x22e>
			}
		}
		else
		{
			Request = RequestErrorPinOutOFRange ;
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_u8SetPinValue+0x22e>
		}
	}
	else
	{
		Request = RequestErrorGroupOutOFRange ;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f0:	28 96       	adiw	r28, 0x08	; 8
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_u8GetPinRead>:

u8 DIO_u8GetPinRead(u8 Local_GroupName,u8 Local_PinNumber,u8 *Referance_Value)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_u8GetPinRead+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_u8GetPinRead+0x8>
    130a:	0f 92       	push	r0
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8a 83       	std	Y+2, r24	; 0x02
    1312:	6b 83       	std	Y+3, r22	; 0x03
    1314:	5d 83       	std	Y+5, r21	; 0x05
    1316:	4c 83       	std	Y+4, r20	; 0x04
	RequestState Request ;
	if ((Local_GroupName<=DIO_GroupD)&&(Local_GroupName>=DIO_GroupA))
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	85 30       	cpi	r24, 0x05	; 5
    131c:	20 f5       	brcc	.+72     	; 0x1366 <DIO_u8GetPinRead+0x64>
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 23       	and	r24, r24
    1322:	09 f1       	breq	.+66     	; 0x1366 <DIO_u8GetPinRead+0x64>
	{
		if((Local_PinNumber<=DIO_PIN7)&&((Local_PinNumber>=DIO_PIN0)))
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 30       	cpi	r24, 0x08	; 8
    1328:	d8 f4       	brcc	.+54     	; 0x1360 <DIO_u8GetPinRead+0x5e>
		{
			switch(Local_GroupName)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	d1 f4       	brne	.+52     	; 0x136a <DIO_u8GetPinRead+0x68>
			{
			case DIO_GroupA : (*Referance_Value) = Get_Bit(DIO_PINA,Local_PinNumber);
    1336:	e9 e3       	ldi	r30, 0x39	; 57
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_u8GetPinRead+0x4c>
    134a:	55 95       	asr	r21
    134c:	47 95       	ror	r20
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_u8GetPinRead+0x48>
    1352:	ca 01       	movw	r24, r20
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	ec 81       	ldd	r30, Y+4	; 0x04
    1358:	fd 81       	ldd	r31, Y+5	; 0x05
    135a:	80 83       	st	Z, r24
			Request =RequestHandled ;
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	05 c0       	rjmp	.+10     	; 0x136a <DIO_u8GetPinRead+0x68>

			}
		}
		else
		{
			Request = RequestErrorPinOutOFRange ;
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_u8GetPinRead+0x68>
		}
	}
	else
	{
		Request = RequestErrorGroupOutOFRange ;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01

	}
	return Request;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <DIO_u8SetPortDir>:



u8 DIO_u8SetPortDir(u8 Local_GroupName,u8 Local_PortState)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_u8SetPortDir+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <DIO_u8SetPortDir+0x8>
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	8a 83       	std	Y+2, r24	; 0x02
    138c:	6b 83       	std	Y+3, r22	; 0x03
	RequestState  Request ;
	if ((Local_GroupName <=DIO_GroupD)&&(Local_GroupName >=DIO_GroupA))
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	85 30       	cpi	r24, 0x05	; 5
    1392:	c0 f5       	brcc	.+112    	; 0x1404 <DIO_u8SetPortDir+0x88>
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	88 23       	and	r24, r24
    1398:	a9 f1       	breq	.+106    	; 0x1404 <DIO_u8SetPortDir+0x88>
	{
		if (Local_PortState<=0xff)
		{	Request=RequestHandled;
    139a:	19 82       	std	Y+1, r1	; 0x01
		switch(Local_GroupName)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3d 83       	std	Y+5, r19	; 0x05
    13a4:	2c 83       	std	Y+4, r18	; 0x04
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	91 05       	cpc	r25, r1
    13ae:	d9 f0       	breq	.+54     	; 0x13e6 <DIO_u8SetPortDir+0x6a>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	23 30       	cpi	r18, 0x03	; 3
    13b6:	31 05       	cpc	r19, r1
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <DIO_u8SetPortDir+0x4a>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	61 f0       	breq	.+24     	; 0x13dc <DIO_u8SetPortDir+0x60>
    13c4:	21 c0       	rjmp	.+66     	; 0x1408 <DIO_u8SetPortDir+0x8c>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	23 30       	cpi	r18, 0x03	; 3
    13cc:	31 05       	cpc	r19, r1
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <DIO_u8SetPortDir+0x74>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	91 05       	cpc	r25, r1
    13d8:	81 f0       	breq	.+32     	; 0x13fa <DIO_u8SetPortDir+0x7e>
    13da:	16 c0       	rjmp	.+44     	; 0x1408 <DIO_u8SetPortDir+0x8c>
		{
		case DIO_GroupA: DIO_DDRA = Local_PortState;break;
    13dc:	ea e3       	ldi	r30, 0x3A	; 58
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	80 83       	st	Z, r24
    13e4:	11 c0       	rjmp	.+34     	; 0x1408 <DIO_u8SetPortDir+0x8c>
		case DIO_GroupB: DIO_DDRB = Local_PortState;break;
    13e6:	e7 e3       	ldi	r30, 0x37	; 55
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	80 83       	st	Z, r24
    13ee:	0c c0       	rjmp	.+24     	; 0x1408 <DIO_u8SetPortDir+0x8c>
		case DIO_GroupC: DIO_DDRC = Local_PortState;break;
    13f0:	e4 e3       	ldi	r30, 0x34	; 52
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	80 83       	st	Z, r24
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <DIO_u8SetPortDir+0x8c>
		case DIO_GroupD: DIO_DDRD = Local_PortState;break;
    13fa:	e1 e3       	ldi	r30, 0x31	; 49
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	80 83       	st	Z, r24
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8SetPortDir+0x8c>
			Request = RequestErrorNotValidState ;
		}
	}
	else
	{
		Request = RequestErrorGroupOutOFRange;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request ;
    1408:	89 81       	ldd	r24, Y+1	; 0x01

}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_u8GetPortRead>:

u8 DIO_u8GetPortRead(u8 Local_GroupName,u8 *Referance_Value)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_u8GetPortRead+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_u8GetPortRead+0x8>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_u8GetPortRead+0xa>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	7c 83       	std	Y+4, r23	; 0x04
    142c:	6b 83       	std	Y+3, r22	; 0x03
	RequestState  Request ;
	if ((Local_GroupName <=DIO_GroupD)&&(Local_GroupName >=DIO_GroupA))
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	85 30       	cpi	r24, 0x05	; 5
    1432:	08 f0       	brcs	.+2      	; 0x1436 <DIO_u8GetPortRead+0x1c>
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <DIO_u8GetPortRead+0x9a>
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	88 23       	and	r24, r24
    143a:	e1 f1       	breq	.+120    	; 0x14b4 <DIO_u8GetPortRead+0x9a>
	{
		switch(Local_GroupName)
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3e 83       	std	Y+6, r19	; 0x06
    1444:	2d 83       	std	Y+5, r18	; 0x05
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	91 05       	cpc	r25, r1
    144e:	e9 f0       	breq	.+58     	; 0x148a <DIO_u8GetPortRead+0x70>
    1450:	2d 81       	ldd	r18, Y+5	; 0x05
    1452:	3e 81       	ldd	r19, Y+6	; 0x06
    1454:	23 30       	cpi	r18, 0x03	; 3
    1456:	31 05       	cpc	r19, r1
    1458:	34 f4       	brge	.+12     	; 0x1466 <DIO_u8GetPortRead+0x4c>
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	61 f0       	breq	.+24     	; 0x147c <DIO_u8GetPortRead+0x62>
    1464:	29 c0       	rjmp	.+82     	; 0x14b8 <DIO_u8GetPortRead+0x9e>
    1466:	2d 81       	ldd	r18, Y+5	; 0x05
    1468:	3e 81       	ldd	r19, Y+6	; 0x06
    146a:	23 30       	cpi	r18, 0x03	; 3
    146c:	31 05       	cpc	r19, r1
    146e:	a1 f0       	breq	.+40     	; 0x1498 <DIO_u8GetPortRead+0x7e>
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	91 05       	cpc	r25, r1
    1478:	b1 f0       	breq	.+44     	; 0x14a6 <DIO_u8GetPortRead+0x8c>
    147a:	1e c0       	rjmp	.+60     	; 0x14b8 <DIO_u8GetPortRead+0x9e>
		{
		case DIO_GroupA: *Referance_Value=DIO_PINA ;break;
    147c:	e9 e3       	ldi	r30, 0x39	; 57
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	eb 81       	ldd	r30, Y+3	; 0x03
    1484:	fc 81       	ldd	r31, Y+4	; 0x04
    1486:	80 83       	st	Z, r24
    1488:	17 c0       	rjmp	.+46     	; 0x14b8 <DIO_u8GetPortRead+0x9e>
		case DIO_GroupB: *Referance_Value=DIO_PINB ;break;
    148a:	e6 e3       	ldi	r30, 0x36	; 54
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	eb 81       	ldd	r30, Y+3	; 0x03
    1492:	fc 81       	ldd	r31, Y+4	; 0x04
    1494:	80 83       	st	Z, r24
    1496:	10 c0       	rjmp	.+32     	; 0x14b8 <DIO_u8GetPortRead+0x9e>
		case DIO_GroupC: *Referance_Value=DIO_PINC ;break;
    1498:	e3 e3       	ldi	r30, 0x33	; 51
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	eb 81       	ldd	r30, Y+3	; 0x03
    14a0:	fc 81       	ldd	r31, Y+4	; 0x04
    14a2:	80 83       	st	Z, r24
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <DIO_u8GetPortRead+0x9e>
		case DIO_GroupD: *Referance_Value=DIO_PIND ;break;
    14a6:	e0 e3       	ldi	r30, 0x30	; 48
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	eb 81       	ldd	r30, Y+3	; 0x03
    14ae:	fc 81       	ldd	r31, Y+4	; 0x04
    14b0:	80 83       	st	Z, r24
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8GetPortRead+0x9e>
		}
	}
	else
	{
		Request=RequestErrorGroupOutOFRange;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request ;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ba:	26 96       	adiw	r28, 0x06	; 6
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Local_GroupName,u8 Local_PortValue)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_u8SetPortValue+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_u8SetPortValue+0x8>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	6b 83       	std	Y+3, r22	; 0x03
	RequestState  Request ;
	if ((Local_GroupName <=DIO_GroupD)&&(Local_GroupName >=DIO_GroupA))
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	85 30       	cpi	r24, 0x05	; 5
    14e2:	c0 f5       	brcc	.+112    	; 0x1554 <DIO_u8SetPortValue+0x88>
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 23       	and	r24, r24
    14e8:	a9 f1       	breq	.+106    	; 0x1554 <DIO_u8SetPortValue+0x88>
	{
		if (Local_PortValue<=0xff)
		{	Request=RequestHandled;
    14ea:	19 82       	std	Y+1, r1	; 0x01
		switch(Local_GroupName)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	2c 83       	std	Y+4, r18	; 0x04
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	d9 f0       	breq	.+54     	; 0x1536 <DIO_u8SetPortValue+0x6a>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	23 30       	cpi	r18, 0x03	; 3
    1506:	31 05       	cpc	r19, r1
    1508:	34 f4       	brge	.+12     	; 0x1516 <DIO_u8SetPortValue+0x4a>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	61 f0       	breq	.+24     	; 0x152c <DIO_u8SetPortValue+0x60>
    1514:	21 c0       	rjmp	.+66     	; 0x1558 <DIO_u8SetPortValue+0x8c>
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	23 30       	cpi	r18, 0x03	; 3
    151c:	31 05       	cpc	r19, r1
    151e:	81 f0       	breq	.+32     	; 0x1540 <DIO_u8SetPortValue+0x74>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	91 05       	cpc	r25, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <DIO_u8SetPortValue+0x7e>
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <DIO_u8SetPortValue+0x8c>
		{
		case DIO_GroupA: DIO_PORTA = Local_PortValue;break;
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	80 83       	st	Z, r24
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <DIO_u8SetPortValue+0x8c>
		case DIO_GroupB: DIO_PORTB = Local_PortValue;break;
    1536:	e8 e3       	ldi	r30, 0x38	; 56
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	80 83       	st	Z, r24
    153e:	0c c0       	rjmp	.+24     	; 0x1558 <DIO_u8SetPortValue+0x8c>
		case DIO_GroupC: DIO_PORTC = Local_PortValue;break;
    1540:	e5 e3       	ldi	r30, 0x35	; 53
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	80 83       	st	Z, r24
    1548:	07 c0       	rjmp	.+14     	; 0x1558 <DIO_u8SetPortValue+0x8c>
		case DIO_GroupD: DIO_PORTD = Local_PortValue;break;
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	80 83       	st	Z, r24
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_u8SetPortValue+0x8c>
			Request = RequestErrorNotValidState ;
		}
	}
	else
	{
		Request = RequestErrorGroupOutOFRange;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request ;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <SevSeg_VoidInit>:
#include "../../../HAL/SevSeg/Header/SevSeg_Private.h"
#include "../../../HAL/SevSeg/Header/SevSeg_Config.h"
#include "../../../HAL/SevSeg/Header/SevSeg_Interface.h"

void SevSeg_VoidInit(void)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDir(SevSeg_Group1,0xff); //in macros file add #define PortOut  0xff  #define Portin   0x0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	6f ef       	ldi	r22, 0xFF	; 255
    1576:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_u8SetPortDir>
	DIO_u8SetPortValue(SevSeg_Group1,0);    //in macros file add #define PortLow  0     #define PortHigh 0xff
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_u8SetPortValue>
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <SevSeg_VoidDisplayNumber>:
void SevSeg_VoidDisplayNumber(u8 Local_Number)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(SevSeg_Group1,SevSeg_Arr[Local_Number]);
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	fc 01       	movw	r30, r24
    159c:	ef 52       	subi	r30, 0x2F	; 47
    159e:	fe 4f       	sbci	r31, 0xFE	; 254
    15a0:	90 81       	ld	r25, Z
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	69 2f       	mov	r22, r25
    15a6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_u8SetPortValue>
}
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <LCD_VoidSendCommand>:
#include "../Header/Lcd_Private.h"
#include "../Header/Lcd_Config.h"
#include "../Header/Lcd_Interface.h"

void LCD_VoidSendCommand(u8 Local_Command)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	89 83       	std	Y+1, r24	; 0x01
	//	_delay_ms(1);
	//	/*clear the enable*/
	//	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,Low);
	///*---------------------------------------------------------*/
	/*Rs equal low */
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRS,Low);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	67 e0       	ldi	r22, 0x07	; 7
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
	/*Rw equal low*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRW,Low);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	66 e0       	ldi	r22, 0x06	; 6
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
	/*Set the Enable*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,High);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	65 e0       	ldi	r22, 0x05	; 5
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
	/*Write Command*/
	DIO_u8SetPortValue(Lcd_DataGroup,Local_Command);
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	69 81       	ldd	r22, Y+1	; 0x01
    15e0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_u8SetPortValue>
	/*clear the enable*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,Low);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	65 e0       	ldi	r22, 0x05	; 5
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>


}
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Local_Char)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	2f 97       	sbiw	r28, 0x0f	; 15
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Rs equal High */
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRS,High);
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	67 e0       	ldi	r22, 0x07	; 7
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
	/*RW Equal low */
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRW,Low);
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	66 e0       	ldi	r22, 0x06	; 6
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>

	/*Send Char*/
	DIO_u8SetPortValue(Lcd_DataGroup,Local_Char);
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	6f 85       	ldd	r22, Y+15	; 0x0f
    1624:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_u8SetPortValue>
	/*Set the Enable*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,High);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	65 e0       	ldi	r22, 0x05	; 5
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	bf e3       	ldi	r27, 0x3F	; 63
    163a:	8b 87       	std	Y+11, r24	; 0x0b
    163c:	9c 87       	std	Y+12, r25	; 0x0c
    163e:	ad 87       	std	Y+13, r26	; 0x0d
    1640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8f 83       	std	Y+7, r24	; 0x07
    165c:	98 87       	std	Y+8, r25	; 0x08
    165e:	a9 87       	std	Y+9, r26	; 0x09
    1660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <LCD_VoidSendChar+0x8e>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <LCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <LCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <LCD_VoidSendChar+0xee>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9c 83       	std	Y+4, r25	; 0x04
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_VoidSendChar+0xdc>
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <LCD_VoidSendChar+0xd0>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <LCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_VoidSendChar+0x118>
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for 1ms*/
	_delay_ms(1);
	/*clear the enable*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,Low);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	65 e0       	ldi	r22, 0x05	; 5
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>

}
    1720:	2f 96       	adiw	r28, 0x0f	; 15
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <LCD_VoidInit>:

void LCD_VoidInit(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	e8 97       	sbiw	r28, 0x38	; 56
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDir(Lcd_ControlGroup,Lcd_ControlRS,Output);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	67 e0       	ldi	r22, 0x07	; 7
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Lcd_ControlGroup,Lcd_ControlRW,Output);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	66 e0       	ldi	r22, 0x06	; 6
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Lcd_ControlGroup,Lcd_ControlE,Output);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
	DIO_u8SetPortDir(Lcd_DataGroup,0xff);
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	6f ef       	ldi	r22, 0xFF	; 255
    1768:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_u8SetPortDir>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	ac e0       	ldi	r26, 0x0C	; 12
    1772:	b2 e4       	ldi	r27, 0x42	; 66
    1774:	8d ab       	std	Y+53, r24	; 0x35
    1776:	9e ab       	std	Y+54, r25	; 0x36
    1778:	af ab       	std	Y+55, r26	; 0x37
    177a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6d a9       	ldd	r22, Y+53	; 0x35
    177e:	7e a9       	ldd	r23, Y+54	; 0x36
    1780:	8f a9       	ldd	r24, Y+55	; 0x37
    1782:	98 ad       	ldd	r25, Y+56	; 0x38
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	89 ab       	std	Y+49, r24	; 0x31
    1796:	9a ab       	std	Y+50, r25	; 0x32
    1798:	ab ab       	std	Y+51, r26	; 0x33
    179a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    179c:	69 a9       	ldd	r22, Y+49	; 0x31
    179e:	7a a9       	ldd	r23, Y+50	; 0x32
    17a0:	8b a9       	ldd	r24, Y+51	; 0x33
    17a2:	9c a9       	ldd	r25, Y+52	; 0x34
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <LCD_VoidInit+0x8c>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    17be:	69 a9       	ldd	r22, Y+49	; 0x31
    17c0:	7a a9       	ldd	r23, Y+50	; 0x32
    17c2:	8b a9       	ldd	r24, Y+51	; 0x33
    17c4:	9c a9       	ldd	r25, Y+52	; 0x34
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6d a9       	ldd	r22, Y+53	; 0x35
    17d8:	7e a9       	ldd	r23, Y+54	; 0x36
    17da:	8f a9       	ldd	r24, Y+55	; 0x37
    17dc:	98 ad       	ldd	r25, Y+56	; 0x38
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	98 ab       	std	Y+48, r25	; 0x30
    17fc:	8f a7       	std	Y+47, r24	; 0x2f
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <LCD_VoidInit+0xec>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e a7       	std	Y+46, r25	; 0x2e
    1806:	8d a7       	std	Y+45, r24	; 0x2d
    1808:	8d a5       	ldd	r24, Y+45	; 0x2d
    180a:	9e a5       	ldd	r25, Y+46	; 0x2e
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_VoidInit+0xda>
    1810:	9e a7       	std	Y+46, r25	; 0x2e
    1812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8f a5       	ldd	r24, Y+47	; 0x2f
    1816:	98 a9       	ldd	r25, Y+48	; 0x30
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	98 ab       	std	Y+48, r25	; 0x30
    181c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1820:	98 a9       	ldd	r25, Y+48	; 0x30
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <LCD_VoidInit+0xce>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	98 ab       	std	Y+48, r25	; 0x30
    183a:	8f a7       	std	Y+47, r24	; 0x2f
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	9c a7       	std	Y+44, r25	; 0x2c
    1842:	8b a7       	std	Y+43, r24	; 0x2b
    1844:	8b a5       	ldd	r24, Y+43	; 0x2b
    1846:	9c a5       	ldd	r25, Y+44	; 0x2c
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_VoidInit+0x116>
    184c:	9c a7       	std	Y+44, r25	; 0x2c
    184e:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait the delay */
	_delay_ms(35);
	/*send the function set */
	LCD_VoidSendCommand(0x38);
    1850:	88 e3       	ldi	r24, 0x38	; 56
    1852:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e8       	ldi	r26, 0x80	; 128
    185c:	bf e3       	ldi	r27, 0x3F	; 63
    185e:	8f a3       	std	Y+39, r24	; 0x27
    1860:	98 a7       	std	Y+40, r25	; 0x28
    1862:	a9 a7       	std	Y+41, r26	; 0x29
    1864:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1866:	6f a1       	ldd	r22, Y+39	; 0x27
    1868:	78 a5       	ldd	r23, Y+40	; 0x28
    186a:	89 a5       	ldd	r24, Y+41	; 0x29
    186c:	9a a5       	ldd	r25, Y+42	; 0x2a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a ef       	ldi	r20, 0xFA	; 250
    1874:	54 e4       	ldi	r21, 0x44	; 68
    1876:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8b a3       	std	Y+35, r24	; 0x23
    1880:	9c a3       	std	Y+36, r25	; 0x24
    1882:	ad a3       	std	Y+37, r26	; 0x25
    1884:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1886:	6b a1       	ldd	r22, Y+35	; 0x23
    1888:	7c a1       	ldd	r23, Y+36	; 0x24
    188a:	8d a1       	ldd	r24, Y+37	; 0x25
    188c:	9e a1       	ldd	r25, Y+38	; 0x26
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	2c f4       	brge	.+10     	; 0x18a8 <LCD_VoidInit+0x176>
		__ticks = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9a a3       	std	Y+34, r25	; 0x22
    18a4:	89 a3       	std	Y+33, r24	; 0x21
    18a6:	3f c0       	rjmp	.+126    	; 0x1926 <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    18a8:	6b a1       	ldd	r22, Y+35	; 0x23
    18aa:	7c a1       	ldd	r23, Y+36	; 0x24
    18ac:	8d a1       	ldd	r24, Y+37	; 0x25
    18ae:	9e a1       	ldd	r25, Y+38	; 0x26
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    18bc:	18 16       	cp	r1, r24
    18be:	4c f5       	brge	.+82     	; 0x1912 <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c0:	6f a1       	ldd	r22, Y+39	; 0x27
    18c2:	78 a5       	ldd	r23, Y+40	; 0x28
    18c4:	89 a5       	ldd	r24, Y+41	; 0x29
    18c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9a a3       	std	Y+34, r25	; 0x22
    18e6:	89 a3       	std	Y+33, r24	; 0x21
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <LCD_VoidInit+0x1d6>
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	98 a3       	std	Y+32, r25	; 0x20
    18f0:	8f 8f       	std	Y+31, r24	; 0x1f
    18f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f4:	98 a1       	ldd	r25, Y+32	; 0x20
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_VoidInit+0x1c4>
    18fa:	98 a3       	std	Y+32, r25	; 0x20
    18fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1900:	9a a1       	ldd	r25, Y+34	; 0x22
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	9a a3       	std	Y+34, r25	; 0x22
    1906:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	89 a1       	ldd	r24, Y+33	; 0x21
    190a:	9a a1       	ldd	r25, Y+34	; 0x22
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f7       	brne	.-38     	; 0x18ea <LCD_VoidInit+0x1b8>
    1910:	14 c0       	rjmp	.+40     	; 0x193a <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1912:	6b a1       	ldd	r22, Y+35	; 0x23
    1914:	7c a1       	ldd	r23, Y+36	; 0x24
    1916:	8d a1       	ldd	r24, Y+37	; 0x25
    1918:	9e a1       	ldd	r25, Y+38	; 0x26
    191a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9a a3       	std	Y+34, r25	; 0x22
    1924:	89 a3       	std	Y+33, r24	; 0x21
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	9e 8f       	std	Y+30, r25	; 0x1e
    192c:	8d 8f       	std	Y+29, r24	; 0x1d
    192e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_VoidInit+0x200>
    1936:	9e 8f       	std	Y+30, r25	; 0x1e
    1938:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Wait for 39us*/
	_delay_ms(1);
	/*Send the Display on */
	LCD_VoidSendCommand(0x0C);
    193a:	8c e0       	ldi	r24, 0x0C	; 12
    193c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	bf e3       	ldi	r27, 0x3F	; 63
    1948:	89 8f       	std	Y+25, r24	; 0x19
    194a:	9a 8f       	std	Y+26, r25	; 0x1a
    194c:	ab 8f       	std	Y+27, r26	; 0x1b
    194e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	69 8d       	ldd	r22, Y+25	; 0x19
    1952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a ef       	ldi	r20, 0xFA	; 250
    195e:	54 e4       	ldi	r21, 0x44	; 68
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8d 8b       	std	Y+21, r24	; 0x15
    196a:	9e 8b       	std	Y+22, r25	; 0x16
    196c:	af 8b       	std	Y+23, r26	; 0x17
    196e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1970:	6d 89       	ldd	r22, Y+21	; 0x15
    1972:	7e 89       	ldd	r23, Y+22	; 0x16
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_VoidInit+0x260>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	69 8d       	ldd	r22, Y+25	; 0x19
    19ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_VoidInit+0x2c0>
    19d4:	88 ec       	ldi	r24, 0xC8	; 200
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	9a 89       	ldd	r25, Y+18	; 0x12
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_VoidInit+0x2ae>
    19e4:	9a 8b       	std	Y+18, r25	; 0x12
    19e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_VoidInit+0x2a2>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6d 89       	ldd	r22, Y+21	; 0x15
    19fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1a00:	8f 89       	ldd	r24, Y+23	; 0x17
    1a02:	98 8d       	ldd	r25, Y+24	; 0x18
    1a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
    1a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1a:	98 89       	ldd	r25, Y+16	; 0x10
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_VoidInit+0x2ea>
    1a20:	98 8b       	std	Y+16, r25	; 0x10
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait for 39us*/
	_delay_ms(1);
	/*send the clear*/
	LCD_VoidSendCommand(0x01);
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e0       	ldi	r26, 0x00	; 0
    1a30:	b0 e4       	ldi	r27, 0x40	; 64
    1a32:	8b 87       	std	Y+11, r24	; 0x0b
    1a34:	9c 87       	std	Y+12, r25	; 0x0c
    1a36:	ad 87       	std	Y+13, r26	; 0x0d
    1a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8f 83       	std	Y+7, r24	; 0x07
    1a54:	98 87       	std	Y+8, r25	; 0x08
    1a56:	a9 87       	std	Y+9, r26	; 0x09
    1a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <LCD_VoidInit+0x34a>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <LCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <LCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <LCD_VoidInit+0x3aa>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_VoidInit+0x398>
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <LCD_VoidInit+0x38c>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <LCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_VoidInit+0x3d4>
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	/*wait for 1.53ms*/
	_delay_ms(2);
}
    1b0e:	e8 96       	adiw	r28, 0x38	; 56
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <LCD_VoidSendString+0x6>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	if (Address_String!=NULL)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	81 f0       	breq	.+32     	; 0x1b56 <LCD_VoidSendString+0x36>
    1b36:	0a c0       	rjmp	.+20     	; 0x1b4c <LCD_VoidSendString+0x2c>
	{
		while (*Address_String!='\0')
		{
			LCD_VoidSendChar(*Address_String);
    1b38:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3c:	80 81       	ld	r24, Z
    1b3e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
			Address_String++;
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01

void LCD_VoidSendString(u8 *Address_String)
{
	if (Address_String!=NULL)
	{
		while (*Address_String!='\0')
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	80 81       	ld	r24, Z
    1b52:	88 23       	and	r24, r24
    1b54:	89 f7       	brne	.-30     	; 0x1b38 <LCD_VoidSendString+0x18>
		{
			LCD_VoidSendChar(*Address_String);
			Address_String++;
		}
	}
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <LCD_VoidSendNumber>:

void LCD_VoidSendNumber(u32 local_U32Number)
{
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	e2 97       	sbiw	r28, 0x32	; 50
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	6f a7       	std	Y+47, r22	; 0x2f
    1b7a:	78 ab       	std	Y+48, r23	; 0x30
    1b7c:	89 ab       	std	Y+49, r24	; 0x31
    1b7e:	9a ab       	std	Y+50, r25	; 0x32
	u32 Local_Arr[11];
	u8 local_counter = 0 ;
    1b80:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(local_U32Number == 0)
    1b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b84:	98 a9       	ldd	r25, Y+48	; 0x30
    1b86:	a9 a9       	ldd	r26, Y+49	; 0x31
    1b88:	ba a9       	ldd	r27, Y+50	; 0x32
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	a1 05       	cpc	r26, r1
    1b8e:	b1 05       	cpc	r27, r1
    1b90:	d9 f5       	brne	.+118    	; 0x1c08 <LCD_VoidSendNumber+0xa8>
	{
		LCD_VoidSendChar('0');
    1b92:	80 e3       	ldi	r24, 0x30	; 48
    1b94:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
    1b98:	5f c0       	rjmp	.+190    	; 0x1c58 <LCD_VoidSendNumber+0xf8>
	}
	else
	{
		while(local_U32Number!=0)
		{
			Local_Arr[local_counter]=(local_U32Number%10);
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	08 2f       	mov	r16, r24
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
    1ba0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba4:	a9 a9       	ldd	r26, Y+49	; 0x31
    1ba6:	ba a9       	ldd	r27, Y+50	; 0x32
    1ba8:	2a e0       	ldi	r18, 0x0A	; 10
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 ac 14 	call	0x2958	; 0x2958 <__udivmodsi4>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	bd 01       	movw	r22, r26
    1bc0:	98 01       	movw	r18, r16
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	ce 01       	movw	r24, r28
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	82 0f       	add	r24, r18
    1bd0:	93 1f       	adc	r25, r19
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	32 96       	adiw	r30, 0x02	; 2
    1bd6:	40 83       	st	Z, r20
    1bd8:	51 83       	std	Z+1, r21	; 0x01
    1bda:	62 83       	std	Z+2, r22	; 0x02
    1bdc:	73 83       	std	Z+3, r23	; 0x03
			local_U32Number/=10;
    1bde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be0:	98 a9       	ldd	r25, Y+48	; 0x30
    1be2:	a9 a9       	ldd	r26, Y+49	; 0x31
    1be4:	ba a9       	ldd	r27, Y+50	; 0x32
    1be6:	2a e0       	ldi	r18, 0x0A	; 10
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 ac 14 	call	0x2958	; 0x2958 <__udivmodsi4>
    1bf6:	da 01       	movw	r26, r20
    1bf8:	c9 01       	movw	r24, r18
    1bfa:	8f a7       	std	Y+47, r24	; 0x2f
    1bfc:	98 ab       	std	Y+48, r25	; 0x30
    1bfe:	a9 ab       	std	Y+49, r26	; 0x31
    1c00:	ba ab       	std	Y+50, r27	; 0x32
			//	LCD_VoidSendChar(Local_Arr[local_counter]+48);
			local_counter++;
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	8f 5f       	subi	r24, 0xFF	; 255
    1c06:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_VoidSendChar('0');
	}
	else
	{
		while(local_U32Number!=0)
    1c08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0c:	a9 a9       	ldd	r26, Y+49	; 0x31
    1c0e:	ba a9       	ldd	r27, Y+50	; 0x32
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	a1 05       	cpc	r26, r1
    1c14:	b1 05       	cpc	r27, r1
    1c16:	09 f6       	brne	.-126    	; 0x1b9a <LCD_VoidSendNumber+0x3a>
			local_counter++;
			//  LCD_VoidSendChar(local_counter+48);

		}

		for(i =local_counter-1;i>=0;i--)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	81 50       	subi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	19 c0       	rjmp	.+50     	; 0x1c52 <LCD_VoidSendNumber+0xf2>
		{
			LCD_VoidSendChar(Local_Arr[i]+48);
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	99 27       	eor	r25, r25
    1c24:	87 fd       	sbrc	r24, 7
    1c26:	90 95       	com	r25
    1c28:	9c 01       	movw	r18, r24
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	ce 01       	movw	r24, r28
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	32 96       	adiw	r30, 0x02	; 2
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	a2 81       	ldd	r26, Z+2	; 0x02
    1c44:	b3 81       	ldd	r27, Z+3	; 0x03
    1c46:	80 5d       	subi	r24, 0xD0	; 208
    1c48:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
			local_counter++;
			//  LCD_VoidSendChar(local_counter+48);

		}

		for(i =local_counter-1;i>=0;i--)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	81 50       	subi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 23       	and	r24, r24
    1c56:	24 f7       	brge	.-56     	; 0x1c20 <LCD_VoidSendNumber+0xc0>
		{
			LCD_VoidSendChar(Local_Arr[i]+48);
		//	_delay_ms(200);
		}
	}
}
    1c58:	e2 96       	adiw	r28, 0x32	; 50
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	08 95       	ret

00001c6e <LCD_VoidGoToXY>:

void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition){
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <LCD_VoidGoToXY+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <LCD_VoidGoToXY+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	6b 83       	std	Y+3, r22	; 0x03


	/*create the var u8 */
	u8 local_position ;
	switch (Local_XPosition)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3d 83       	std	Y+5, r19	; 0x05
    1c88:	2c 83       	std	Y+4, r18	; 0x04
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <LCD_VoidGoToXY+0x30>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	21 30       	cpi	r18, 0x01	; 1
    1c98:	31 05       	cpc	r19, r1
    1c9a:	21 f0       	breq	.+8      	; 0x1ca4 <LCD_VoidGoToXY+0x36>
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <LCD_VoidGoToXY+0x3c>
	{
	case 0 : local_position = Local_YPosition;break;
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <LCD_VoidGoToXY+0x3c>
	case 1 : local_position = Local_YPosition+0x40 ; break ;
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	80 5c       	subi	r24, 0xC0	; 192
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VoidSendCommand(local_position+0x80);
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	80 58       	subi	r24, 0x80	; 128
    1cae:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>


}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <Kpd_u8CheckPressed>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

u8 Kpd_u8CheckPressed(){
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	2d 97       	sbiw	r28, 0x0d	; 13
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8ColArr[ColumnsNumber] = {Kpd_Column0, Kpd_Column1, Kpd_Column2, Kpd_Column3};
    1cda:	1c 82       	std	Y+4, r1	; 0x04
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	8e 83       	std	Y+6, r24	; 0x06
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8RowArr[RowsNumber] = {Kpd_Row0, Kpd_Row1, Kpd_Row2, Kpd_Row3};
    1ce8:	84 e0       	ldi	r24, 0x04	; 4
    1cea:	88 87       	std	Y+8, r24	; 0x08
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	89 87       	std	Y+9, r24	; 0x09
    1cf0:	86 e0       	ldi	r24, 0x06	; 6
    1cf2:	8a 87       	std	Y+10, r24	; 0x0a
    1cf4:	87 e0       	ldi	r24, 0x07	; 7
    1cf6:	8b 87       	std	Y+11, r24	; 0x0b
	u8 referenceValue;
	for(Local_u8ColIndex = 0; Local_u8ColIndex < ColumnsNumber; Local_u8ColIndex++){
    1cf8:	1a 82       	std	Y+2, r1	; 0x02
    1cfa:	77 c0       	rjmp	.+238    	; 0x1dea <Kpd_u8CheckPressed+0x128>
		/*Activate current column by clearing it*/
		DIO_u8SetPinValue(Kpd_ColumnGroup,Local_u8ColArr[Local_u8ColIndex],Low);
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	ce 01       	movw	r24, r28
    1d04:	04 96       	adiw	r24, 0x04	; 4
    1d06:	fc 01       	movw	r30, r24
    1d08:	e2 0f       	add	r30, r18
    1d0a:	f3 1f       	adc	r31, r19
    1d0c:	90 81       	ld	r25, Z
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	69 2f       	mov	r22, r25
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < RowsNumber; Local_u8RowIndex++){
    1d18:	19 82       	std	Y+1, r1	; 0x01
    1d1a:	52 c0       	rjmp	.+164    	; 0x1dc0 <Kpd_u8CheckPressed+0xfe>
			if(DIO_u8GetPinRead(Kpd_RowGroup,Local_u8RowArr[Local_u8RowIndex],&referenceValue) == RequestHandled && referenceValue == Low){
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	ce 01       	movw	r24, r28
    1d24:	08 96       	adiw	r24, 0x08	; 8
    1d26:	fc 01       	movw	r30, r24
    1d28:	e2 0f       	add	r30, r18
    1d2a:	f3 1f       	adc	r31, r19
    1d2c:	90 81       	ld	r25, Z
    1d2e:	9e 01       	movw	r18, r28
    1d30:	24 5f       	subi	r18, 0xF4	; 244
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	69 2f       	mov	r22, r25
    1d38:	a9 01       	movw	r20, r18
    1d3a:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8GetPinRead>
    1d3e:	88 23       	and	r24, r24
    1d40:	e1 f5       	brne	.+120    	; 0x1dba <Kpd_u8CheckPressed+0xf8>
    1d42:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d44:	88 23       	and	r24, r24
    1d46:	c9 f5       	brne	.+114    	; 0x1dba <Kpd_u8CheckPressed+0xf8>
				Local_u8PressedKey = Kpd_Values[Local_u8RowIndex][Local_u8ColIndex];
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	ca 01       	movw	r24, r20
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	82 0f       	add	r24, r18
    1d60:	93 1f       	adc	r25, r19
    1d62:	fc 01       	movw	r30, r24
    1d64:	eb 51       	subi	r30, 0x1B	; 27
    1d66:	fe 4f       	sbci	r31, 0xFE	; 254
    1d68:	80 81       	ld	r24, Z
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinRead(Kpd_RowGroup,Local_u8RowArr[Local_u8RowIndex],&referenceValue) == RequestHandled && referenceValue == Low){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	08 96       	adiw	r24, 0x08	; 8
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	90 81       	ld	r25, Z
    1d7e:	9e 01       	movw	r18, r28
    1d80:	24 5f       	subi	r18, 0xF4	; 244
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	69 2f       	mov	r22, r25
    1d88:	a9 01       	movw	r20, r18
    1d8a:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8GetPinRead>
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f4       	brne	.+6      	; 0x1d98 <Kpd_u8CheckPressed+0xd6>
    1d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d94:	88 23       	and	r24, r24
    1d96:	51 f3       	breq	.-44     	; 0x1d6c <Kpd_u8CheckPressed+0xaa>

				}
				DIO_u8SetPinValue(Kpd_ColumnGroup,Local_u8ColArr[Local_u8ColIndex],High);
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	ce 01       	movw	r24, r28
    1da0:	04 96       	adiw	r24, 0x04	; 4
    1da2:	fc 01       	movw	r30, r24
    1da4:	e2 0f       	add	r30, r18
    1da6:	f3 1f       	adc	r31, r19
    1da8:	90 81       	ld	r25, Z
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	69 2f       	mov	r22, r25
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
				return Local_u8PressedKey;
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	8d 87       	std	Y+13, r24	; 0x0d
    1db8:	1e c0       	rjmp	.+60     	; 0x1df6 <Kpd_u8CheckPressed+0x134>
	u8 referenceValue;
	for(Local_u8ColIndex = 0; Local_u8ColIndex < ColumnsNumber; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_u8SetPinValue(Kpd_ColumnGroup,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < RowsNumber; Local_u8RowIndex++){
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <Kpd_u8CheckPressed+0x106>
    1dc6:	aa cf       	rjmp	.-172    	; 0x1d1c <Kpd_u8CheckPressed+0x5a>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_u8SetPinValue(Kpd_ColumnGroup,Local_u8ColArr[Local_u8ColIndex],High);
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	ce 01       	movw	r24, r28
    1dd0:	04 96       	adiw	r24, 0x04	; 4
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	90 81       	ld	r25, Z
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	69 2f       	mov	r22, r25
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8ColArr[ColumnsNumber] = {Kpd_Column0, Kpd_Column1, Kpd_Column2, Kpd_Column3};
	u8 Local_u8RowArr[RowsNumber] = {Kpd_Row0, Kpd_Row1, Kpd_Row2, Kpd_Row3};
	u8 referenceValue;
	for(Local_u8ColIndex = 0; Local_u8ColIndex < ColumnsNumber; Local_u8ColIndex++){
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	8a 83       	std	Y+2, r24	; 0x02
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	84 30       	cpi	r24, 0x04	; 4
    1dee:	08 f4       	brcc	.+2      	; 0x1df2 <Kpd_u8CheckPressed+0x130>
    1df0:	85 cf       	rjmp	.-246    	; 0x1cfc <Kpd_u8CheckPressed+0x3a>

		/*Deactivate current column by setting it*/
		DIO_u8SetPinValue(Kpd_ColumnGroup,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	8d 87       	std	Y+13, r24	; 0x0d
    1df6:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1df8:	2d 96       	adiw	r28, 0x0d	; 13
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <Kpd_u8Init>:

u8 Kpd_u8Init(){
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <Kpd_u8Init+0x6>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	u8 request;
	request = DIO_u8SetPinDir(Kpd_ColumnGroup,Kpd_Column0,Output);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	88 23       	and	r24, r24
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <Kpd_u8Init+0x22>
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	b0 c0       	rjmp	.+352    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinDir(Kpd_ColumnGroup,Kpd_Column1,Output);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1e36:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	88 23       	and	r24, r24
    1e3c:	19 f0       	breq	.+6      	; 0x1e44 <Kpd_u8Init+0x3a>
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	a4 c0       	rjmp	.+328    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinDir(Kpd_ColumnGroup,Kpd_Column2,Output);
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	62 e0       	ldi	r22, 0x02	; 2
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1e4e:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	88 23       	and	r24, r24
    1e54:	19 f0       	breq	.+6      	; 0x1e5c <Kpd_u8Init+0x52>
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	98 c0       	rjmp	.+304    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinDir(Kpd_ColumnGroup,Kpd_Column3,Output);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	63 e0       	ldi	r22, 0x03	; 3
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1e66:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	88 23       	and	r24, r24
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <Kpd_u8Init+0x6a>
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	8c c0       	rjmp	.+280    	; 0x1f8c <Kpd_u8Init+0x182>

	request = DIO_u8SetPinValue(Kpd_ColumnGroup,Kpd_Column0,High);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	88 23       	and	r24, r24
    1e84:	19 f0       	breq	.+6      	; 0x1e8c <Kpd_u8Init+0x82>
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	8a 83       	std	Y+2, r24	; 0x02
    1e8a:	80 c0       	rjmp	.+256    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinValue(Kpd_ColumnGroup,Kpd_Column1,High);
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1e96:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	88 23       	and	r24, r24
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <Kpd_u8Init+0x9a>
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	74 c0       	rjmp	.+232    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinValue(Kpd_ColumnGroup,Kpd_Column2,High);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1eae:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	88 23       	and	r24, r24
    1eb4:	19 f0       	breq	.+6      	; 0x1ebc <Kpd_u8Init+0xb2>
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	68 c0       	rjmp	.+208    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinValue(Kpd_ColumnGroup,Kpd_Column3,High);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 23       	and	r24, r24
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <Kpd_u8Init+0xca>
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	8a 83       	std	Y+2, r24	; 0x02
    1ed2:	5c c0       	rjmp	.+184    	; 0x1f8c <Kpd_u8Init+0x182>

	request = DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row0,Input);
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	64 e0       	ldi	r22, 0x04	; 4
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1ede:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	88 23       	and	r24, r24
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <Kpd_u8Init+0xe2>
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	50 c0       	rjmp	.+160    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row1,Input);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	65 e0       	ldi	r22, 0x05	; 5
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1ef6:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	88 23       	and	r24, r24
    1efc:	19 f0       	breq	.+6      	; 0x1f04 <Kpd_u8Init+0xfa>
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	8a 83       	std	Y+2, r24	; 0x02
    1f02:	44 c0       	rjmp	.+136    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row2,Input);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	66 e0       	ldi	r22, 0x06	; 6
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	88 23       	and	r24, r24
    1f14:	19 f0       	breq	.+6      	; 0x1f1c <Kpd_u8Init+0x112>
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	38 c0       	rjmp	.+112    	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row3,Input);
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	67 e0       	ldi	r22, 0x07	; 7
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_u8SetPinDir>
    1f26:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	88 23       	and	r24, r24
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <Kpd_u8Init+0x12a>
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	2c c0       	rjmp	.+88     	; 0x1f8c <Kpd_u8Init+0x182>

	request = DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row0,High);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	64 e0       	ldi	r22, 0x04	; 4
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 23       	and	r24, r24
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <Kpd_u8Init+0x142>
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8a 83       	std	Y+2, r24	; 0x02
    1f4a:	20 c0       	rjmp	.+64     	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row1,High);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	65 e0       	ldi	r22, 0x05	; 5
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1f56:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <Kpd_u8Init+0x15a>
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row2,High);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	66 e0       	ldi	r22, 0x06	; 6
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	if(request != RequestHandled) {return request;}
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	88 23       	and	r24, r24
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <Kpd_u8Init+0x172>
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	08 c0       	rjmp	.+16     	; 0x1f8c <Kpd_u8Init+0x182>
	request = DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row3,High);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	67 e0       	ldi	r22, 0x07	; 7
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_u8SetPinValue>
    1f86:	89 83       	std	Y+1, r24	; 0x01

	return request;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <Number_UpToPower>:
#include "Macro.h"
// #include "Funcs.h"


u32 Number_UpToPower(u32 Base , u32 Power)
	{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	2c 97       	sbiw	r28, 0x0c	; 12
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	69 83       	std	Y+1, r22	; 0x01
    1fae:	7a 83       	std	Y+2, r23	; 0x02
    1fb0:	8b 83       	std	Y+3, r24	; 0x03
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	2d 83       	std	Y+5, r18	; 0x05
    1fb6:	3e 83       	std	Y+6, r19	; 0x06
    1fb8:	4f 83       	std	Y+7, r20	; 0x07
    1fba:	58 87       	std	Y+8, r21	; 0x08
		if (Power==0) return 1;
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	af 81       	ldd	r26, Y+7	; 0x07
    1fc2:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	a1 05       	cpc	r26, r1
    1fc8:	b1 05       	cpc	r27, r1
    1fca:	49 f4       	brne	.+18     	; 0x1fde <Number_UpToPower+0x46>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	89 87       	std	Y+9, r24	; 0x09
    1fd6:	9a 87       	std	Y+10, r25	; 0x0a
    1fd8:	ab 87       	std	Y+11, r26	; 0x0b
    1fda:	bc 87       	std	Y+12, r27	; 0x0c
    1fdc:	20 c0       	rjmp	.+64     	; 0x201e <Number_UpToPower+0x86>
		else  return (Base * Number_UpToPower(Base,(Power-1)));
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	af 81       	ldd	r26, Y+7	; 0x07
    1fe4:	b8 85       	ldd	r27, Y+8	; 0x08
    1fe6:	9c 01       	movw	r18, r24
    1fe8:	ad 01       	movw	r20, r26
    1fea:	21 50       	subi	r18, 0x01	; 1
    1fec:	30 40       	sbci	r19, 0x00	; 0
    1fee:	40 40       	sbci	r20, 0x00	; 0
    1ff0:	50 40       	sbci	r21, 0x00	; 0
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <Number_UpToPower>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	29 81       	ldd	r18, Y+1	; 0x01
    2008:	3a 81       	ldd	r19, Y+2	; 0x02
    200a:	4b 81       	ldd	r20, Y+3	; 0x03
    200c:	5c 81       	ldd	r21, Y+4	; 0x04
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 8d 14 	call	0x291a	; 0x291a <__mulsi3>
    2016:	69 87       	std	Y+9, r22	; 0x09
    2018:	7a 87       	std	Y+10, r23	; 0x0a
    201a:	8b 87       	std	Y+11, r24	; 0x0b
    201c:	9c 87       	std	Y+12, r25	; 0x0c
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	ab 85       	ldd	r26, Y+11	; 0x0b
    2024:	bc 85       	ldd	r27, Y+12	; 0x0c

	}
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	2c 96       	adiw	r28, 0x0c	; 12
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <Number_UpToPowerOfZeros>:
	u32 Number_UpToPowerOfZeros(u8 Number_ToMultiWithZeros, u8 Number_ofZeros)
	{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <Number_UpToPowerOfZeros+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <Number_UpToPowerOfZeros+0x8>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <Number_UpToPowerOfZeros+0xa>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	6e 83       	std	Y+6, r22	; 0x06
	u32 y = Number_UpToPower(10,(u32)Number_ofZeros);
    204e:	8e 81       	ldd	r24, Y+6	; 0x06
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	6a e0       	ldi	r22, 0x0A	; 10
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <Number_UpToPower>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	ab 83       	std	Y+3, r26	; 0x03
    206e:	bc 83       	std	Y+4, r27	; 0x04
			return(y*(u32)Number_ToMultiWithZeros);
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	29 81       	ldd	r18, Y+1	; 0x01
    207c:	3a 81       	ldd	r19, Y+2	; 0x02
    207e:	4b 81       	ldd	r20, Y+3	; 0x03
    2080:	5c 81       	ldd	r21, Y+4	; 0x04
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 8d 14 	call	0x291a	; 0x291a <__mulsi3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
	}
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	26 96       	adiw	r28, 0x06	; 6
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <Number_TypedInDigits>:
	u32 Number_TypedInDigits (u8* Local_Number)
	{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	2c 97       	sbiw	r28, 0x0c	; 12
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	9c 87       	std	Y+12, r25	; 0x0c
    20ba:	8b 87       	std	Y+11, r24	; 0x0b
		u32 Result=0;
    20bc:	1f 82       	std	Y+7, r1	; 0x07
    20be:	18 86       	std	Y+8, r1	; 0x08
    20c0:	19 86       	std	Y+9, r1	; 0x09
    20c2:	1a 86       	std	Y+10, r1	; 0x0a
		u8 Number_OfDigits=0;
    20c4:	1e 82       	std	Y+6, r1	; 0x06
		u8 i =0;
    20c6:	1d 82       	std	Y+5, r1	; 0x05
		for (i=0;i<10;i++)
    20c8:	1d 82       	std	Y+5, r1	; 0x05
    20ca:	55 c0       	rjmp	.+170    	; 0x2176 <Number_TypedInDigits+0xd2>
		{	
			if ((Local_Number[i]!=50)&&(Local_Number[i]!=40)&&(Local_Number[i]!=30)
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    20d6:	fc 01       	movw	r30, r24
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	80 81       	ld	r24, Z
    20de:	82 33       	cpi	r24, 0x32	; 50
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <Number_TypedInDigits+0x40>
    20e2:	4d c0       	rjmp	.+154    	; 0x217e <Number_TypedInDigits+0xda>
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ee:	fc 01       	movw	r30, r24
    20f0:	e2 0f       	add	r30, r18
    20f2:	f3 1f       	adc	r31, r19
    20f4:	80 81       	ld	r24, Z
    20f6:	88 32       	cpi	r24, 0x28	; 40
    20f8:	09 f4       	brne	.+2      	; 0x20fc <Number_TypedInDigits+0x58>
    20fa:	41 c0       	rjmp	.+130    	; 0x217e <Number_TypedInDigits+0xda>
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	8b 85       	ldd	r24, Y+11	; 0x0b
    2104:	9c 85       	ldd	r25, Y+12	; 0x0c
    2106:	fc 01       	movw	r30, r24
    2108:	e2 0f       	add	r30, r18
    210a:	f3 1f       	adc	r31, r19
    210c:	80 81       	ld	r24, Z
    210e:	8e 31       	cpi	r24, 0x1E	; 30
    2110:	b1 f1       	breq	.+108    	; 0x217e <Number_TypedInDigits+0xda>
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	8b 85       	ldd	r24, Y+11	; 0x0b
    211a:	9c 85       	ldd	r25, Y+12	; 0x0c
    211c:	fc 01       	movw	r30, r24
    211e:	e2 0f       	add	r30, r18
    2120:	f3 1f       	adc	r31, r19
    2122:	80 81       	ld	r24, Z
    2124:	84 31       	cpi	r24, 0x14	; 20
    2126:	59 f1       	breq	.+86     	; 0x217e <Number_TypedInDigits+0xda>
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2130:	9c 85       	ldd	r25, Y+12	; 0x0c
    2132:	fc 01       	movw	r30, r24
    2134:	e2 0f       	add	r30, r18
    2136:	f3 1f       	adc	r31, r19
    2138:	80 81       	ld	r24, Z
    213a:	8a 30       	cpi	r24, 0x0A	; 10
    213c:	01 f1       	breq	.+64     	; 0x217e <Number_TypedInDigits+0xda>
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	8b 85       	ldd	r24, Y+11	; 0x0b
    2146:	9c 85       	ldd	r25, Y+12	; 0x0c
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	80 81       	ld	r24, Z
    2150:	8c 33       	cpi	r24, 0x3C	; 60
    2152:	a9 f0       	breq	.+42     	; 0x217e <Number_TypedInDigits+0xda>
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	8b 85       	ldd	r24, Y+11	; 0x0b
    215c:	9c 85       	ldd	r25, Y+12	; 0x0c
    215e:	fc 01       	movw	r30, r24
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	80 81       	ld	r24, Z
    2166:	8f 3f       	cpi	r24, 0xFF	; 255
    2168:	51 f0       	breq	.+20     	; 0x217e <Number_TypedInDigits+0xda>
				&&(Local_Number[i]!=20)&&(Local_Number[i]!=10)
				&&(Local_Number[i]!=60)
				&& (Local_Number[i]!=NotPressed))
			{
				Number_OfDigits++;
    216a:	8e 81       	ldd	r24, Y+6	; 0x06
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	8e 83       	std	Y+6, r24	; 0x06
	u32 Number_TypedInDigits (u8* Local_Number)
	{
		u32 Result=0;
		u8 Number_OfDigits=0;
		u8 i =0;
		for (i=0;i<10;i++)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	8a 30       	cpi	r24, 0x0A	; 10
    217a:	08 f4       	brcc	.+2      	; 0x217e <Number_TypedInDigits+0xda>
    217c:	a7 cf       	rjmp	.-178    	; 0x20cc <Number_TypedInDigits+0x28>
				break;
				}
				// Number_OfDigits=9
		}	
				u32 x;
				for (i=0;i<(Number_OfDigits);i++)
    217e:	1d 82       	std	Y+5, r1	; 0x05
    2180:	2d c0       	rjmp	.+90     	; 0x21dc <Number_TypedInDigits+0x138>
				{
					x=Number_UpToPowerOfZeros(Local_Number[i],(Number_OfDigits-1-i));
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	8b 85       	ldd	r24, Y+11	; 0x0b
    218a:	9c 85       	ldd	r25, Y+12	; 0x0c
    218c:	fc 01       	movw	r30, r24
    218e:	e2 0f       	add	r30, r18
    2190:	f3 1f       	adc	r31, r19
    2192:	20 81       	ld	r18, Z
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	39 2f       	mov	r19, r25
    219a:	38 1b       	sub	r19, r24
    219c:	83 2f       	mov	r24, r19
    219e:	98 2f       	mov	r25, r24
    21a0:	91 50       	subi	r25, 0x01	; 1
    21a2:	82 2f       	mov	r24, r18
    21a4:	69 2f       	mov	r22, r25
    21a6:	0e 94 1e 10 	call	0x203c	; 0x203c <Number_UpToPowerOfZeros>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	ab 83       	std	Y+3, r26	; 0x03
    21b4:	bc 83       	std	Y+4, r27	; 0x04
					(Result)+=x ; 
    21b6:	2f 81       	ldd	r18, Y+7	; 0x07
    21b8:	38 85       	ldd	r19, Y+8	; 0x08
    21ba:	49 85       	ldd	r20, Y+9	; 0x09
    21bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	ab 81       	ldd	r26, Y+3	; 0x03
    21c4:	bc 81       	ldd	r27, Y+4	; 0x04
    21c6:	82 0f       	add	r24, r18
    21c8:	93 1f       	adc	r25, r19
    21ca:	a4 1f       	adc	r26, r20
    21cc:	b5 1f       	adc	r27, r21
    21ce:	8f 83       	std	Y+7, r24	; 0x07
    21d0:	98 87       	std	Y+8, r25	; 0x08
    21d2:	a9 87       	std	Y+9, r26	; 0x09
    21d4:	ba 87       	std	Y+10, r27	; 0x0a
				break;
				}
				// Number_OfDigits=9
		}	
				u32 x;
				for (i=0;i<(Number_OfDigits);i++)
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	8e 81       	ldd	r24, Y+6	; 0x06
    21e0:	98 17       	cp	r25, r24
    21e2:	78 f2       	brcs	.-98     	; 0x2182 <Number_TypedInDigits+0xde>
				{
					x=Number_UpToPowerOfZeros(Local_Number[i],(Number_OfDigits-1-i));
					(Result)+=x ; 
				}
				return Result;
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	a9 85       	ldd	r26, Y+9	; 0x09
    21ea:	ba 85       	ldd	r27, Y+10	; 0x0a
			
	}
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	2c 96       	adiw	r28, 0x0c	; 12
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <main>:
#include "../HAL/SEVSEG/Header/SevSeg_Interface.h"
#include "../HAL/Lcd/Header/Lcd_Interface.h"
//#include "../Common/MATH.h"

void main()
{
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	ee 97       	sbiw	r28, 0x3e	; 62
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
	SevSeg_VoidInit();
    221e:	0e 94 b5 0a 	call	0x156a	; 0x156a <SevSeg_VoidInit>
	Kpd_u8Init();
    2222:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Kpd_u8Init>
	LCD_VoidInit();
    2226:	0e 94 99 0b 	call	0x1732	; 0x1732 <LCD_VoidInit>
	u8 Operation_Indicator=0;
    222a:	19 aa       	std	Y+49, r1	; 0x31
	u8 BtnValue = NotPressed;
    222c:	8f ef       	ldi	r24, 0xFF	; 255
    222e:	88 ab       	std	Y+48, r24	; 0x30
	u8 arr[11]={0,0,0,0,0,0,0,0,0,0,0};
    2230:	8b e0       	ldi	r24, 0x0B	; 11
    2232:	fe 01       	movw	r30, r28
    2234:	f2 96       	adiw	r30, 0x32	; 50
    2236:	df 01       	movw	r26, r30
    2238:	28 2f       	mov	r18, r24
    223a:	1d 92       	st	X+, r1
    223c:	2a 95       	dec	r18
    223e:	e9 f7       	brne	.-6      	; 0x223a <main+0x38>
u32	Temporary_Num=0;
    2240:	1c a6       	std	Y+44, r1	; 0x2c
    2242:	1d a6       	std	Y+45, r1	; 0x2d
    2244:	1e a6       	std	Y+46, r1	; 0x2e
    2246:	1f a6       	std	Y+47, r1	; 0x2f


		LCD_VoidSendString("Welcome To My ");
    2248:	80 e6       	ldi	r24, 0x60	; 96
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
		LCD_VoidGoToXY(1,0);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
		LCD_VoidSendString("Claculator");
    2258:	8f e6       	ldi	r24, 0x6F	; 111
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	aa e7       	ldi	r26, 0x7A	; 122
    2266:	b4 e4       	ldi	r27, 0x44	; 68
    2268:	8f a3       	std	Y+39, r24	; 0x27
    226a:	98 a7       	std	Y+40, r25	; 0x28
    226c:	a9 a7       	std	Y+41, r26	; 0x29
    226e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	6f a1       	ldd	r22, Y+39	; 0x27
    2272:	78 a5       	ldd	r23, Y+40	; 0x28
    2274:	89 a5       	ldd	r24, Y+41	; 0x29
    2276:	9a a5       	ldd	r25, Y+42	; 0x2a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8b a3       	std	Y+35, r24	; 0x23
    228a:	9c a3       	std	Y+36, r25	; 0x24
    228c:	ad a3       	std	Y+37, r26	; 0x25
    228e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <main+0xb0>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9a a3       	std	Y+34, r25	; 0x22
    22ae:	89 a3       	std	Y+33, r24	; 0x21
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <main+0x12e>
	else if (__tmp > 65535)
    22b2:	6b a1       	ldd	r22, Y+35	; 0x23
    22b4:	7c a1       	ldd	r23, Y+36	; 0x24
    22b6:	8d a1       	ldd	r24, Y+37	; 0x25
    22b8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	6f a1       	ldd	r22, Y+39	; 0x27
    22cc:	78 a5       	ldd	r23, Y+40	; 0x28
    22ce:	89 a5       	ldd	r24, Y+41	; 0x29
    22d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9a a3       	std	Y+34, r25	; 0x22
    22f0:	89 a3       	std	Y+33, r24	; 0x21
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <main+0x110>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	98 a3       	std	Y+32, r25	; 0x20
    22fa:	8f 8f       	std	Y+31, r24	; 0x1f
    22fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <main+0xfe>
    2304:	98 a3       	std	Y+32, r25	; 0x20
    2306:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	89 a1       	ldd	r24, Y+33	; 0x21
    230a:	9a a1       	ldd	r25, Y+34	; 0x22
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9a a3       	std	Y+34, r25	; 0x22
    2310:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	89 a1       	ldd	r24, Y+33	; 0x21
    2314:	9a a1       	ldd	r25, Y+34	; 0x22
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <main+0xf2>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6b a1       	ldd	r22, Y+35	; 0x23
    231e:	7c a1       	ldd	r23, Y+36	; 0x24
    2320:	8d a1       	ldd	r24, Y+37	; 0x25
    2322:	9e a1       	ldd	r25, Y+38	; 0x26
    2324:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9a a3       	std	Y+34, r25	; 0x22
    232e:	89 a3       	std	Y+33, r24	; 0x21
    2330:	89 a1       	ldd	r24, Y+33	; 0x21
    2332:	9a a1       	ldd	r25, Y+34	; 0x22
    2334:	9e 8f       	std	Y+30, r25	; 0x1e
    2336:	8d 8f       	std	Y+29, r24	; 0x1d
    2338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <main+0x13a>
    2340:	9e 8f       	std	Y+30, r25	; 0x1e
    2342:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
		LCD_VoidGoToXY(0,0);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
		LCD_VoidSendString("My Max Num is : ");
    2352:	8a e7       	ldi	r24, 0x7A	; 122
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
		LCD_VoidGoToXY(0x01,0x00);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
		LCD_VoidSendNumber(Max_u32_Value);
    2362:	6f ef       	ldi	r22, 0xFF	; 255
    2364:	7f ef       	ldi	r23, 0xFF	; 255
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9f e7       	ldi	r25, 0x7F	; 127
    236a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	aa e7       	ldi	r26, 0x7A	; 122
    2374:	b4 e4       	ldi	r27, 0x44	; 68
    2376:	89 8f       	std	Y+25, r24	; 0x19
    2378:	9a 8f       	std	Y+26, r25	; 0x1a
    237a:	ab 8f       	std	Y+27, r26	; 0x1b
    237c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	69 8d       	ldd	r22, Y+25	; 0x19
    2380:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2382:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2384:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a ef       	ldi	r20, 0xFA	; 250
    238c:	54 e4       	ldi	r21, 0x44	; 68
    238e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8d 8b       	std	Y+21, r24	; 0x15
    2398:	9e 8b       	std	Y+22, r25	; 0x16
    239a:	af 8b       	std	Y+23, r26	; 0x17
    239c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    239e:	6d 89       	ldd	r22, Y+21	; 0x15
    23a0:	7e 89       	ldd	r23, Y+22	; 0x16
    23a2:	8f 89       	ldd	r24, Y+23	; 0x17
    23a4:	98 8d       	ldd	r25, Y+24	; 0x18
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <main+0x1be>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	8b 8b       	std	Y+19, r24	; 0x13
    23be:	3f c0       	rjmp	.+126    	; 0x243e <main+0x23c>
	else if (__tmp > 65535)
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	69 8d       	ldd	r22, Y+25	; 0x19
    23da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <main+0x21e>
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9a 8b       	std	Y+18, r25	; 0x12
    2408:	89 8b       	std	Y+17, r24	; 0x11
    240a:	89 89       	ldd	r24, Y+17	; 0x11
    240c:	9a 89       	ldd	r25, Y+18	; 0x12
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <main+0x20c>
    2412:	9a 8b       	std	Y+18, r25	; 0x12
    2414:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <main+0x200>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <main+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6d 89       	ldd	r22, Y+21	; 0x15
    242c:	7e 89       	ldd	r23, Y+22	; 0x16
    242e:	8f 89       	ldd	r24, Y+23	; 0x17
    2430:	98 8d       	ldd	r25, Y+24	; 0x18
    2432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	98 8b       	std	Y+16, r25	; 0x10
    2444:	8f 87       	std	Y+15, r24	; 0x0f
    2446:	8f 85       	ldd	r24, Y+15	; 0x0f
    2448:	98 89       	ldd	r25, Y+16	; 0x10
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <main+0x248>
    244e:	98 8b       	std	Y+16, r25	; 0x10
    2450:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
		LCD_VoidGoToXY(0,0);
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
		LCD_VoidSendString("ONLY_Positive_");
    2460:	8b e8       	ldi	r24, 0x8B	; 139
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
		LCD_VoidGoToXY(1,0);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
		LCD_VoidSendString("And_Decimal_Nums");
    2470:	8a e9       	ldi	r24, 0x9A	; 154
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	aa e7       	ldi	r26, 0x7A	; 122
    247e:	b4 e4       	ldi	r27, 0x44	; 68
    2480:	8b 87       	std	Y+11, r24	; 0x0b
    2482:	9c 87       	std	Y+12, r25	; 0x0c
    2484:	ad 87       	std	Y+13, r26	; 0x0d
    2486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6b 85       	ldd	r22, Y+11	; 0x0b
    248a:	7c 85       	ldd	r23, Y+12	; 0x0c
    248c:	8d 85       	ldd	r24, Y+13	; 0x0d
    248e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8f 83       	std	Y+7, r24	; 0x07
    24a2:	98 87       	std	Y+8, r25	; 0x08
    24a4:	a9 87       	std	Y+9, r26	; 0x09
    24a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <main+0x2c8>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <main+0x346>
	else if (__tmp > 65535)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	0f c0       	rjmp	.+30     	; 0x252a <main+0x328>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9c 83       	std	Y+4, r25	; 0x04
    2512:	8b 83       	std	Y+3, r24	; 0x03
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <main+0x316>
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <main+0x30a>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <main+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <main+0x352>
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_VoidSendCommand(LCD_ClearDisplay);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
		LCD_VoidGoToXY(0,0);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
		u8 i=0;
    256a:	1b a6       	std	Y+43, r1	; 0x2b
		while (1)
		{

		for(i=0;i<11;i++)
    256c:	1b a6       	std	Y+43, r1	; 0x2b
    256e:	6c c0       	rjmp	.+216    	; 0x2648 <main+0x446>
		{


			if (BtnValue==NO_PRESSED_KEY)
    2570:	88 a9       	ldd	r24, Y+48	; 0x30
    2572:	8f 3f       	cpi	r24, 0xFF	; 255
    2574:	39 f4       	brne	.+14     	; 0x2584 <main+0x382>
    2576:	03 c0       	rjmp	.+6      	; 0x257e <main+0x37c>
			{
			while (BtnValue==NO_PRESSED_KEY)
			{
				BtnValue=Kpd_u8CheckPressed();
    2578:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <Kpd_u8CheckPressed>
    257c:	88 ab       	std	Y+48, r24	; 0x30
		{


			if (BtnValue==NO_PRESSED_KEY)
			{
			while (BtnValue==NO_PRESSED_KEY)
    257e:	88 a9       	ldd	r24, Y+48	; 0x30
    2580:	8f 3f       	cpi	r24, 0xFF	; 255
    2582:	d1 f3       	breq	.-12     	; 0x2578 <main+0x376>
			{
				BtnValue=Kpd_u8CheckPressed();
			}
			}

			if((BtnValue!=10)
    2584:	88 a9       	ldd	r24, Y+48	; 0x30
    2586:	8a 30       	cpi	r24, 0x0A	; 10
    2588:	89 f1       	breq	.+98     	; 0x25ec <main+0x3ea>
    258a:	88 a9       	ldd	r24, Y+48	; 0x30
    258c:	84 31       	cpi	r24, 0x14	; 20
    258e:	71 f1       	breq	.+92     	; 0x25ec <main+0x3ea>
    2590:	88 a9       	ldd	r24, Y+48	; 0x30
    2592:	8e 31       	cpi	r24, 0x1E	; 30
    2594:	59 f1       	breq	.+86     	; 0x25ec <main+0x3ea>
    2596:	88 a9       	ldd	r24, Y+48	; 0x30
    2598:	88 32       	cpi	r24, 0x28	; 40
    259a:	41 f1       	breq	.+80     	; 0x25ec <main+0x3ea>
    259c:	88 a9       	ldd	r24, Y+48	; 0x30
    259e:	82 33       	cpi	r24, 0x32	; 50
    25a0:	29 f1       	breq	.+74     	; 0x25ec <main+0x3ea>
    25a2:	88 a9       	ldd	r24, Y+48	; 0x30
    25a4:	8c 33       	cpi	r24, 0x3C	; 60
    25a6:	11 f1       	breq	.+68     	; 0x25ec <main+0x3ea>
    25a8:	88 a9       	ldd	r24, Y+48	; 0x30
    25aa:	8f 3f       	cpi	r24, 0xFF	; 255
    25ac:	f9 f0       	breq	.+62     	; 0x25ec <main+0x3ea>
					&&(BtnValue!=20)&&(BtnValue!=30)
					&&(BtnValue!=40)&&(BtnValue!=50)&&(BtnValue!=60)
					&&(BtnValue!=NO_PRESSED_KEY))
			{
				if (i==0)
    25ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b0:	88 23       	and	r24, r24
    25b2:	39 f4       	brne	.+14     	; 0x25c2 <main+0x3c0>
				{
				LCD_VoidSendCommand(LCD_ClearDisplay);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
				LCD_VoidGoToXY(0,0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
				}
				arr[i]=BtnValue;
    25c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	ce 01       	movw	r24, r28
    25ca:	c2 96       	adiw	r24, 0x32	; 50
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	88 a9       	ldd	r24, Y+48	; 0x30
    25d4:	80 83       	st	Z, r24
					LCD_VoidSendNumber(BtnValue);
    25d6:	88 a9       	ldd	r24, Y+48	; 0x30
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
					BtnValue=NO_PRESSED_KEY;
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	88 ab       	std	Y+48, r24	; 0x30
			}
			if (((BtnValue==10)
    25ec:	88 a9       	ldd	r24, Y+48	; 0x30
    25ee:	8a 30       	cpi	r24, 0x0A	; 10
    25f0:	79 f0       	breq	.+30     	; 0x2610 <main+0x40e>
    25f2:	88 a9       	ldd	r24, Y+48	; 0x30
    25f4:	84 31       	cpi	r24, 0x14	; 20
    25f6:	61 f0       	breq	.+24     	; 0x2610 <main+0x40e>
    25f8:	88 a9       	ldd	r24, Y+48	; 0x30
    25fa:	8e 31       	cpi	r24, 0x1E	; 30
    25fc:	49 f0       	breq	.+18     	; 0x2610 <main+0x40e>
    25fe:	88 a9       	ldd	r24, Y+48	; 0x30
    2600:	88 32       	cpi	r24, 0x28	; 40
    2602:	31 f0       	breq	.+12     	; 0x2610 <main+0x40e>
    2604:	88 a9       	ldd	r24, Y+48	; 0x30
    2606:	82 33       	cpi	r24, 0x32	; 50
    2608:	19 f0       	breq	.+6      	; 0x2610 <main+0x40e>
    260a:	88 a9       	ldd	r24, Y+48	; 0x30
    260c:	8c 33       	cpi	r24, 0x3C	; 60
    260e:	c9 f4       	brne	.+50     	; 0x2642 <main+0x440>
    2610:	88 a9       	ldd	r24, Y+48	; 0x30
    2612:	8f 3f       	cpi	r24, 0xFF	; 255
    2614:	b1 f0       	breq	.+44     	; 0x2642 <main+0x440>
					||(BtnValue==20)||(BtnValue==30)
					||(BtnValue==40)||(BtnValue==50)||(BtnValue==60))
					&&(BtnValue!=NO_PRESSED_KEY))
			{
					arr[i]=BtnValue;
    2616:	8b a5       	ldd	r24, Y+43	; 0x2b
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	ce 01       	movw	r24, r28
    261e:	c2 96       	adiw	r24, 0x32	; 50
    2620:	fc 01       	movw	r30, r24
    2622:	e2 0f       	add	r30, r18
    2624:	f3 1f       	adc	r31, r19
    2626:	88 a9       	ldd	r24, Y+48	; 0x30
    2628:	80 83       	st	Z, r24
					LCD_VoidSendCommand(LCD_ClearDisplay);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
					Operation_Indicator=BtnValue;
    2630:	88 a9       	ldd	r24, Y+48	; 0x30
    2632:	89 ab       	std	Y+49, r24	; 0x31
					LCD_VoidGoToXY(0,0);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
					BtnValue=NO_PRESSED_KEY;
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	88 ab       	std	Y+48, r24	; 0x30
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <main+0x44e>
		LCD_VoidGoToXY(0,0);
		u8 i=0;
		while (1)
		{

		for(i=0;i<11;i++)
    2642:	8b a5       	ldd	r24, Y+43	; 0x2b
    2644:	8f 5f       	subi	r24, 0xFF	; 255
    2646:	8b a7       	std	Y+43, r24	; 0x2b
    2648:	8b a5       	ldd	r24, Y+43	; 0x2b
    264a:	8b 30       	cpi	r24, 0x0B	; 11
    264c:	08 f4       	brcc	.+2      	; 0x2650 <main+0x44e>
    264e:	90 cf       	rjmp	.-224    	; 0x2570 <main+0x36e>
			}



		}
		switch (Operation_Indicator)
    2650:	89 a9       	ldd	r24, Y+49	; 0x31
    2652:	a8 2f       	mov	r26, r24
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	be af       	std	Y+62, r27	; 0x3e
    2658:	ad af       	std	Y+61, r26	; 0x3d
    265a:	2d ad       	ldd	r18, Y+61	; 0x3d
    265c:	3e ad       	ldd	r19, Y+62	; 0x3e
    265e:	2e 31       	cpi	r18, 0x1E	; 30
    2660:	31 05       	cpc	r19, r1
    2662:	09 f4       	brne	.+2      	; 0x2666 <main+0x464>
    2664:	95 c0       	rjmp	.+298    	; 0x2790 <main+0x58e>
    2666:	8d ad       	ldd	r24, Y+61	; 0x3d
    2668:	9e ad       	ldd	r25, Y+62	; 0x3e
    266a:	8f 31       	cpi	r24, 0x1F	; 31
    266c:	91 05       	cpc	r25, r1
    266e:	5c f4       	brge	.+22     	; 0x2686 <main+0x484>
    2670:	ad ad       	ldd	r26, Y+61	; 0x3d
    2672:	be ad       	ldd	r27, Y+62	; 0x3e
    2674:	aa 30       	cpi	r26, 0x0A	; 10
    2676:	b1 05       	cpc	r27, r1
    2678:	c9 f0       	breq	.+50     	; 0x26ac <main+0x4aa>
    267a:	2d ad       	ldd	r18, Y+61	; 0x3d
    267c:	3e ad       	ldd	r19, Y+62	; 0x3e
    267e:	24 31       	cpi	r18, 0x14	; 20
    2680:	31 05       	cpc	r19, r1
    2682:	99 f1       	breq	.+102    	; 0x26ea <main+0x4e8>
    2684:	73 cf       	rjmp	.-282    	; 0x256c <main+0x36a>
    2686:	8d ad       	ldd	r24, Y+61	; 0x3d
    2688:	9e ad       	ldd	r25, Y+62	; 0x3e
    268a:	82 33       	cpi	r24, 0x32	; 50
    268c:	91 05       	cpc	r25, r1
    268e:	09 f4       	brne	.+2      	; 0x2692 <main+0x490>
    2690:	28 c1       	rjmp	.+592    	; 0x28e2 <main+0x6e0>
    2692:	ad ad       	ldd	r26, Y+61	; 0x3d
    2694:	be ad       	ldd	r27, Y+62	; 0x3e
    2696:	ac 33       	cpi	r26, 0x3C	; 60
    2698:	b1 05       	cpc	r27, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <main+0x49c>
    269c:	2f c1       	rjmp	.+606    	; 0x28fc <main+0x6fa>
    269e:	2d ad       	ldd	r18, Y+61	; 0x3d
    26a0:	3e ad       	ldd	r19, Y+62	; 0x3e
    26a2:	28 32       	cpi	r18, 0x28	; 40
    26a4:	31 05       	cpc	r19, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <main+0x4a8>
    26a8:	94 c0       	rjmp	.+296    	; 0x27d2 <main+0x5d0>
    26aa:	60 cf       	rjmp	.-320    	; 0x256c <main+0x36a>
		{
		case 0 : break;
		case 10 :Temporary_Num+=Number_TypedInDigits(arr);
    26ac:	ce 01       	movw	r24, r28
    26ae:	c2 96       	adiw	r24, 0x32	; 50
    26b0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    26b4:	9b 01       	movw	r18, r22
    26b6:	ac 01       	movw	r20, r24
    26b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    26ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    26bc:	ae a5       	ldd	r26, Y+46	; 0x2e
    26be:	bf a5       	ldd	r27, Y+47	; 0x2f
    26c0:	82 0f       	add	r24, r18
    26c2:	93 1f       	adc	r25, r19
    26c4:	a4 1f       	adc	r26, r20
    26c6:	b5 1f       	adc	r27, r21
    26c8:	8c a7       	std	Y+44, r24	; 0x2c
    26ca:	9d a7       	std	Y+45, r25	; 0x2d
    26cc:	ae a7       	std	Y+46, r26	; 0x2e
    26ce:	bf a7       	std	Y+47, r27	; 0x2f
		LCD_VoidSendChar('+');
    26d0:	8b e2       	ldi	r24, 0x2B	; 43
    26d2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
		LCD_VoidSendNumber(Temporary_Num);
    26d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    26d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    26da:	ae a5       	ldd	r26, Y+46	; 0x2e
    26dc:	bf a5       	ldd	r27, Y+47	; 0x2f
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
		Operation_Indicator=0;
    26e6:	19 aa       	std	Y+49, r1	; 0x31
    26e8:	41 cf       	rjmp	.-382    	; 0x256c <main+0x36a>
		break;
		case 20 :
			if 	(Temporary_Num==0)
    26ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    26ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    26ee:	ae a5       	ldd	r26, Y+46	; 0x2e
    26f0:	bf a5       	ldd	r27, Y+47	; 0x2f
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	a1 05       	cpc	r26, r1
    26f6:	b1 05       	cpc	r27, r1
    26f8:	b9 f4       	brne	.+46     	; 0x2728 <main+0x526>
			{
				Temporary_Num=Number_TypedInDigits(arr);
    26fa:	ce 01       	movw	r24, r28
    26fc:	c2 96       	adiw	r24, 0x32	; 50
    26fe:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8c a7       	std	Y+44, r24	; 0x2c
    2708:	9d a7       	std	Y+45, r25	; 0x2d
    270a:	ae a7       	std	Y+46, r26	; 0x2e
    270c:	bf a7       	std	Y+47, r27	; 0x2f
				LCD_VoidSendChar('-');
    270e:	8d e2       	ldi	r24, 0x2D	; 45
    2710:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
				LCD_VoidSendNumber(Temporary_Num);
    2714:	8c a5       	ldd	r24, Y+44	; 0x2c
    2716:	9d a5       	ldd	r25, Y+45	; 0x2d
    2718:	ae a5       	ldd	r26, Y+46	; 0x2e
    271a:	bf a5       	ldd	r27, Y+47	; 0x2f
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
				Operation_Indicator=0;
    2724:	19 aa       	std	Y+49, r1	; 0x31
    2726:	22 cf       	rjmp	.-444    	; 0x256c <main+0x36a>
				break;
			}
			else if (Temporary_Num>=Number_TypedInDigits(arr))
    2728:	ce 01       	movw	r24, r28
    272a:	c2 96       	adiw	r24, 0x32	; 50
    272c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    2730:	9b 01       	movw	r18, r22
    2732:	ac 01       	movw	r20, r24
    2734:	8c a5       	ldd	r24, Y+44	; 0x2c
    2736:	9d a5       	ldd	r25, Y+45	; 0x2d
    2738:	ae a5       	ldd	r26, Y+46	; 0x2e
    273a:	bf a5       	ldd	r27, Y+47	; 0x2f
    273c:	82 17       	cp	r24, r18
    273e:	93 07       	cpc	r25, r19
    2740:	a4 07       	cpc	r26, r20
    2742:	b5 07       	cpc	r27, r21
    2744:	f8 f0       	brcs	.+62     	; 0x2784 <main+0x582>
			{
		Temporary_Num-=Number_TypedInDigits(arr);
    2746:	ce 01       	movw	r24, r28
    2748:	c2 96       	adiw	r24, 0x32	; 50
    274a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    274e:	9b 01       	movw	r18, r22
    2750:	ac 01       	movw	r20, r24
    2752:	8c a5       	ldd	r24, Y+44	; 0x2c
    2754:	9d a5       	ldd	r25, Y+45	; 0x2d
    2756:	ae a5       	ldd	r26, Y+46	; 0x2e
    2758:	bf a5       	ldd	r27, Y+47	; 0x2f
    275a:	82 1b       	sub	r24, r18
    275c:	93 0b       	sbc	r25, r19
    275e:	a4 0b       	sbc	r26, r20
    2760:	b5 0b       	sbc	r27, r21
    2762:	8c a7       	std	Y+44, r24	; 0x2c
    2764:	9d a7       	std	Y+45, r25	; 0x2d
    2766:	ae a7       	std	Y+46, r26	; 0x2e
    2768:	bf a7       	std	Y+47, r27	; 0x2f
		LCD_VoidSendChar('-');
    276a:	8d e2       	ldi	r24, 0x2D	; 45
    276c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
		LCD_VoidSendNumber(Temporary_Num);
    2770:	8c a5       	ldd	r24, Y+44	; 0x2c
    2772:	9d a5       	ldd	r25, Y+45	; 0x2d
    2774:	ae a5       	ldd	r26, Y+46	; 0x2e
    2776:	bf a5       	ldd	r27, Y+47	; 0x2f
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
		Operation_Indicator=0;
    2780:	19 aa       	std	Y+49, r1	; 0x31
    2782:	f4 ce       	rjmp	.-536    	; 0x256c <main+0x36a>
		break;
		}
		else
		{
			LCD_VoidSendString("NEGATIVE !! ");
    2784:	8b ea       	ldi	r24, 0xAB	; 171
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
			Operation_Indicator=0;
    278c:	19 aa       	std	Y+49, r1	; 0x31
    278e:	ee ce       	rjmp	.-548    	; 0x256c <main+0x36a>
			break;
		}
		case 30 :Temporary_Num*=Number_TypedInDigits(arr);
    2790:	ce 01       	movw	r24, r28
    2792:	c2 96       	adiw	r24, 0x32	; 50
    2794:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    2798:	9b 01       	movw	r18, r22
    279a:	ac 01       	movw	r20, r24
    279c:	8c a5       	ldd	r24, Y+44	; 0x2c
    279e:	9d a5       	ldd	r25, Y+45	; 0x2d
    27a0:	ae a5       	ldd	r26, Y+46	; 0x2e
    27a2:	bf a5       	ldd	r27, Y+47	; 0x2f
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 8d 14 	call	0x291a	; 0x291a <__mulsi3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8c a7       	std	Y+44, r24	; 0x2c
    27b2:	9d a7       	std	Y+45, r25	; 0x2d
    27b4:	ae a7       	std	Y+46, r26	; 0x2e
    27b6:	bf a7       	std	Y+47, r27	; 0x2f
		LCD_VoidSendChar('*');
    27b8:	8a e2       	ldi	r24, 0x2A	; 42
    27ba:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
		LCD_VoidSendNumber(Temporary_Num);
    27be:	8c a5       	ldd	r24, Y+44	; 0x2c
    27c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    27c2:	ae a5       	ldd	r26, Y+46	; 0x2e
    27c4:	bf a5       	ldd	r27, Y+47	; 0x2f
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
		Operation_Indicator=0;
    27ce:	19 aa       	std	Y+49, r1	; 0x31
    27d0:	cd ce       	rjmp	.-614    	; 0x256c <main+0x36a>
		break;
		case 40 :
			if 	(Temporary_Num==0)
    27d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    27d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    27d6:	ae a5       	ldd	r26, Y+46	; 0x2e
    27d8:	bf a5       	ldd	r27, Y+47	; 0x2f
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	a1 05       	cpc	r26, r1
    27de:	b1 05       	cpc	r27, r1
    27e0:	b9 f4       	brne	.+46     	; 0x2810 <main+0x60e>
			{
				Temporary_Num=Number_TypedInDigits(arr);
    27e2:	ce 01       	movw	r24, r28
    27e4:	c2 96       	adiw	r24, 0x32	; 50
    27e6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8c a7       	std	Y+44, r24	; 0x2c
    27f0:	9d a7       	std	Y+45, r25	; 0x2d
    27f2:	ae a7       	std	Y+46, r26	; 0x2e
    27f4:	bf a7       	std	Y+47, r27	; 0x2f
				LCD_VoidSendChar('/');
    27f6:	8f e2       	ldi	r24, 0x2F	; 47
    27f8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
				LCD_VoidSendNumber(Temporary_Num);
    27fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    27fe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2800:	ae a5       	ldd	r26, Y+46	; 0x2e
    2802:	bf a5       	ldd	r27, Y+47	; 0x2f
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
				Operation_Indicator=0;
    280c:	19 aa       	std	Y+49, r1	; 0x31
    280e:	ae ce       	rjmp	.-676    	; 0x256c <main+0x36a>
				break;
			}
			else if  (
				(
    2810:	6c a5       	ldd	r22, Y+44	; 0x2c
    2812:	7d a5       	ldd	r23, Y+45	; 0x2d
    2814:	8e a5       	ldd	r24, Y+46	; 0x2e
    2816:	9f a5       	ldd	r25, Y+47	; 0x2f
    2818:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    281c:	7b 01       	movw	r14, r22
    281e:	8c 01       	movw	r16, r24
    2820:	ce 01       	movw	r24, r28
    2822:	c2 96       	adiw	r24, 0x32	; 50
    2824:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    2834:	9b 01       	movw	r18, r22
    2836:	ac 01       	movw	r20, r24
    2838:	c8 01       	movw	r24, r16
    283a:	b7 01       	movw	r22, r14
    283c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	7c 01       	movw	r14, r24
    2846:	8d 01       	movw	r16, r26
    2848:	ce 01       	movw	r24, r28
    284a:	c2 96       	adiw	r24, 0x32	; 50
    284c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	8c a5       	ldd	r24, Y+44	; 0x2c
    2856:	9d a5       	ldd	r25, Y+45	; 0x2d
    2858:	ae a5       	ldd	r26, Y+46	; 0x2e
    285a:	bf a5       	ldd	r27, Y+47	; 0x2f
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 ac 14 	call	0x2958	; 0x2958 <__udivmodsi4>
    2864:	da 01       	movw	r26, r20
    2866:	c9 01       	movw	r24, r18
    2868:	bc 01       	movw	r22, r24
    286a:	cd 01       	movw	r24, r26
    286c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    2870:	9b 01       	movw	r18, r22
    2872:	ac 01       	movw	r20, r24
    2874:	c8 01       	movw	r24, r16
    2876:	b7 01       	movw	r22, r14
    2878:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
				LCD_VoidSendChar('/');
				LCD_VoidSendNumber(Temporary_Num);
				Operation_Indicator=0;
				break;
			}
			else if  (
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2890:	88 23       	and	r24, r24
    2892:	09 f5       	brne	.+66     	; 0x28d6 <main+0x6d4>
				-(Temporary_Num/Number_TypedInDigits(arr))
				)==0
				)
				)
		{
			LCD_VoidSendChar('/');
    2894:	8f e2       	ldi	r24, 0x2F	; 47
    2896:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
		Temporary_Num/=Number_TypedInDigits(arr);
    289a:	ce 01       	movw	r24, r28
    289c:	c2 96       	adiw	r24, 0x32	; 50
    289e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Number_TypedInDigits>
    28a2:	9b 01       	movw	r18, r22
    28a4:	ac 01       	movw	r20, r24
    28a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    28a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    28aa:	ae a5       	ldd	r26, Y+46	; 0x2e
    28ac:	bf a5       	ldd	r27, Y+47	; 0x2f
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 ac 14 	call	0x2958	; 0x2958 <__udivmodsi4>
    28b6:	da 01       	movw	r26, r20
    28b8:	c9 01       	movw	r24, r18
    28ba:	8c a7       	std	Y+44, r24	; 0x2c
    28bc:	9d a7       	std	Y+45, r25	; 0x2d
    28be:	ae a7       	std	Y+46, r26	; 0x2e
    28c0:	bf a7       	std	Y+47, r27	; 0x2f
		LCD_VoidSendNumber(Temporary_Num);
    28c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    28c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    28c6:	ae a5       	ldd	r26, Y+46	; 0x2e
    28c8:	bf a5       	ldd	r27, Y+47	; 0x2f
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
		Operation_Indicator=0;
    28d2:	19 aa       	std	Y+49, r1	; 0x31
    28d4:	4b ce       	rjmp	.-874    	; 0x256c <main+0x36a>
		break;
		}
		else
		{
			LCD_VoidSendString("Non_Decimal_Num!");
    28d6:	88 eb       	ldi	r24, 0xB8	; 184
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_VoidSendString>
			Operation_Indicator=0;
    28de:	19 aa       	std	Y+49, r1	; 0x31
    28e0:	45 ce       	rjmp	.-886    	; 0x256c <main+0x36a>
			break;
		}
		case 50 ://Temporary_Num=Number_TypedInDigits(arr);
		LCD_VoidSendChar('=');
    28e2:	8d e3       	ldi	r24, 0x3D	; 61
    28e4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_VoidSendChar>
		LCD_VoidSendNumber(Temporary_Num);
    28e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    28ea:	9d a5       	ldd	r25, Y+45	; 0x2d
    28ec:	ae a5       	ldd	r26, Y+46	; 0x2e
    28ee:	bf a5       	ldd	r27, Y+47	; 0x2f
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VoidSendNumber>
		Operation_Indicator=0;
    28f8:	19 aa       	std	Y+49, r1	; 0x31
    28fa:	38 ce       	rjmp	.-912    	; 0x256c <main+0x36a>
		break;
		case 60 : Temporary_Num=0;
    28fc:	1c a6       	std	Y+44, r1	; 0x2c
    28fe:	1d a6       	std	Y+45, r1	; 0x2d
    2900:	1e a6       	std	Y+46, r1	; 0x2e
    2902:	1f a6       	std	Y+47, r1	; 0x2f
		BtnValue = NotPressed;
    2904:	8f ef       	ldi	r24, 0xFF	; 255
    2906:	88 ab       	std	Y+48, r24	; 0x30
		Operation_Indicator=0;
    2908:	19 aa       	std	Y+49, r1	; 0x31
		LCD_VoidSendCommand(LCD_ClearDisplay);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_VoidSendCommand>
		LCD_VoidGoToXY(0,0);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGoToXY>
    2918:	29 ce       	rjmp	.-942    	; 0x256c <main+0x36a>

0000291a <__mulsi3>:
    291a:	62 9f       	mul	r22, r18
    291c:	d0 01       	movw	r26, r0
    291e:	73 9f       	mul	r23, r19
    2920:	f0 01       	movw	r30, r0
    2922:	82 9f       	mul	r24, r18
    2924:	e0 0d       	add	r30, r0
    2926:	f1 1d       	adc	r31, r1
    2928:	64 9f       	mul	r22, r20
    292a:	e0 0d       	add	r30, r0
    292c:	f1 1d       	adc	r31, r1
    292e:	92 9f       	mul	r25, r18
    2930:	f0 0d       	add	r31, r0
    2932:	83 9f       	mul	r24, r19
    2934:	f0 0d       	add	r31, r0
    2936:	74 9f       	mul	r23, r20
    2938:	f0 0d       	add	r31, r0
    293a:	65 9f       	mul	r22, r21
    293c:	f0 0d       	add	r31, r0
    293e:	99 27       	eor	r25, r25
    2940:	72 9f       	mul	r23, r18
    2942:	b0 0d       	add	r27, r0
    2944:	e1 1d       	adc	r30, r1
    2946:	f9 1f       	adc	r31, r25
    2948:	63 9f       	mul	r22, r19
    294a:	b0 0d       	add	r27, r0
    294c:	e1 1d       	adc	r30, r1
    294e:	f9 1f       	adc	r31, r25
    2950:	bd 01       	movw	r22, r26
    2952:	cf 01       	movw	r24, r30
    2954:	11 24       	eor	r1, r1
    2956:	08 95       	ret

00002958 <__udivmodsi4>:
    2958:	a1 e2       	ldi	r26, 0x21	; 33
    295a:	1a 2e       	mov	r1, r26
    295c:	aa 1b       	sub	r26, r26
    295e:	bb 1b       	sub	r27, r27
    2960:	fd 01       	movw	r30, r26
    2962:	0d c0       	rjmp	.+26     	; 0x297e <__udivmodsi4_ep>

00002964 <__udivmodsi4_loop>:
    2964:	aa 1f       	adc	r26, r26
    2966:	bb 1f       	adc	r27, r27
    2968:	ee 1f       	adc	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	a2 17       	cp	r26, r18
    296e:	b3 07       	cpc	r27, r19
    2970:	e4 07       	cpc	r30, r20
    2972:	f5 07       	cpc	r31, r21
    2974:	20 f0       	brcs	.+8      	; 0x297e <__udivmodsi4_ep>
    2976:	a2 1b       	sub	r26, r18
    2978:	b3 0b       	sbc	r27, r19
    297a:	e4 0b       	sbc	r30, r20
    297c:	f5 0b       	sbc	r31, r21

0000297e <__udivmodsi4_ep>:
    297e:	66 1f       	adc	r22, r22
    2980:	77 1f       	adc	r23, r23
    2982:	88 1f       	adc	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	1a 94       	dec	r1
    2988:	69 f7       	brne	.-38     	; 0x2964 <__udivmodsi4_loop>
    298a:	60 95       	com	r22
    298c:	70 95       	com	r23
    298e:	80 95       	com	r24
    2990:	90 95       	com	r25
    2992:	9b 01       	movw	r18, r22
    2994:	ac 01       	movw	r20, r24
    2996:	bd 01       	movw	r22, r26
    2998:	cf 01       	movw	r24, r30
    299a:	08 95       	ret

0000299c <__prologue_saves__>:
    299c:	2f 92       	push	r2
    299e:	3f 92       	push	r3
    29a0:	4f 92       	push	r4
    29a2:	5f 92       	push	r5
    29a4:	6f 92       	push	r6
    29a6:	7f 92       	push	r7
    29a8:	8f 92       	push	r8
    29aa:	9f 92       	push	r9
    29ac:	af 92       	push	r10
    29ae:	bf 92       	push	r11
    29b0:	cf 92       	push	r12
    29b2:	df 92       	push	r13
    29b4:	ef 92       	push	r14
    29b6:	ff 92       	push	r15
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	ca 1b       	sub	r28, r26
    29c6:	db 0b       	sbc	r29, r27
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	09 94       	ijmp

000029d4 <__epilogue_restores__>:
    29d4:	2a 88       	ldd	r2, Y+18	; 0x12
    29d6:	39 88       	ldd	r3, Y+17	; 0x11
    29d8:	48 88       	ldd	r4, Y+16	; 0x10
    29da:	5f 84       	ldd	r5, Y+15	; 0x0f
    29dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    29de:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e6:	b9 84       	ldd	r11, Y+9	; 0x09
    29e8:	c8 84       	ldd	r12, Y+8	; 0x08
    29ea:	df 80       	ldd	r13, Y+7	; 0x07
    29ec:	ee 80       	ldd	r14, Y+6	; 0x06
    29ee:	fd 80       	ldd	r15, Y+5	; 0x05
    29f0:	0c 81       	ldd	r16, Y+4	; 0x04
    29f2:	1b 81       	ldd	r17, Y+3	; 0x03
    29f4:	aa 81       	ldd	r26, Y+2	; 0x02
    29f6:	b9 81       	ldd	r27, Y+1	; 0x01
    29f8:	ce 0f       	add	r28, r30
    29fa:	d1 1d       	adc	r29, r1
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	ed 01       	movw	r28, r26
    2a08:	08 95       	ret

00002a0a <_exit>:
    2a0a:	f8 94       	cli

00002a0c <__stop_program>:
    2a0c:	ff cf       	rjmp	.-2      	; 0x2a0c <__stop_program>
